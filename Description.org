* SMC Planetary nebula in SPLUS

  Given that the SMC was observed by S-PLUS and i is already available a catalog of SMC SPLUS, I am going to looking for new PNe in this galaxy. For that I will apply my SPLUS color criteria 
and the statistical techniques (PCA, logistic regression, LDA). SMC was fully  observed, this means that many PNe should be in the SPLUS SMC catalog.
So to explore the possibility to find for new PNe, I verified that by using known PNe and put them in my colour diagrams and I will try to classify them like Pne
using the statistical techniques. 

** Data verification
 + I found this sample of SMC PNe: vizier-> J/A+A/472/101/table7. Chemical evolution of SMC planetary nebulae (Idiart+, 2007, 2007A&A...472..101I)
   This catalog has 46 PNe - > The file is pne-smc-2007.csv.
 + I made cross matching  between this catalog and SPLUS catalog. I found 21 matches using a 1 arcsec of radii. The file is pne-smc-splus-match-2007.fits (.dat)
 + I putted the final matches in my diagram, the good news is that all the object, except 3, are located in the PNe region.
   - One of this three is a SySt (SMC 1), it are located in the region of SySt in the color-color diagrams.
   - For that I wrote a new program to make the color-colour diagrams with this sample. I did this, because the name of the 
     columns of table of the SPLUS SMC catalog are different, the program is: 

                           python ../varios-programas/color-diagrams-splusdr2_automatic-v2.py pne-smc-splus-match-2007

#+BEGIN_SRC python :eval no :tangle color-diagrams-splusdr2_automatic-v2.py
'''
Read the file from S-PLUS IDR2 WDs to make the colour-colour diagrams
'''
from __future__ import print_function
import numpy as np
from astropy.io import fits
import os
import glob
import json
import matplotlib.pyplot as plt
import pandas as pd
#import StringIO
from astropy.table import Table
import seaborn as sns
import sys
from scipy.optimize import fsolve
import colours
import argparse

#The equation the represent the criteria
def findIntersection(m, y, m1, y1, x0):
    x = np.linspace(-10.0, 15.5, 200)
    return fsolve(lambda x : (m*x + y) - (m1*x + y1), x0)

def colour(Aper, f1, f2, f3, f4):
    xcolour = Aper[f1] - Aper[f2]
    ycolour = Aper[f3] - Aper[f4]
    return xcolour, ycolour

#Error
def errormag(Aper, ef1, ef2, ef3, ef4):
    excolour = np.sqrt(Aper[ef1]**2 + Aper[ef1]**2)
    eycolour = np.sqrt(Aper[ef3]**2 + Aper[ef4]**2)
    return excolour, eycolour


parser = argparse.ArgumentParser(
    description="""Make a table from the S-PLUS catalogs """)

parser.add_argument("filesurce", type=str,
                    default="teste-program",
                    help="Name of catalog, taken the prefix ")

cmd_args = parser.parse_args()
fitsfile = cmd_args.filesurce + ".fits"

#Creating  dictionary
col_names = ["r-i", "r-ha", "F515 - F861", "'F515 - F660", 
             "z - g", "z - F660", "F660 - r", "g - F515", "g - i", 
             "F410 - F660", "e(r-i)", "e(r-ha)", "e(F515 - F861)", "e(F515 - F660)", 
             "e(z - g)", "e(z - F660)", "e(F660 - r)", "e(g - F515)", "e(g - i)", 
             "e(F410 - F660)"]

nsourse = len(fitsfile)
colours0 = {c: [np.empty((nsourse,))] for c in col_names}

#Read de files
hdu = fits.open(fitsfile)
tab_ = hdu[1].data
#########################################################################
#Calor Auto#############################################################
#########################################################################
#Color vironen
x1_MAG_APER_aper, y1_MAG_APER_aper = colour(tab_, 'R_aper_3', 'i_aper_3', 'R_aper_3', 'F660_aper_3')
colours0["r-i"] = x1_MAG_APER_aper
colours0["r-ha"] = y1_MAG_APER_aper
#Color
x2_MAG_APER_aper, y2_MAG_APER_aper = colour(tab_, 'F515_aper_3', 'F861_aper_3', 'F515_aper_3', 'F660_aper_3')
colours0["F515 - F861"] = x2_MAG_APER_aper
colours0["F515 - F660"] = y2_MAG_APER_aper
#Color
x3_MAG_APER_aper, y3_MAG_APER_aper = colour(tab_, 'z_aper_3', 'G_aper_3', 'Z_aper_3', 'F660_aper_3')
colours0["z - g"] = x3_MAG_APER_aper
colours0["z - F660"] = y3_MAG_APER_aper
#Color
x4_MAG_APER_aper, y4_MAG_APER_aper = colour(tab_, 'F660_aper_3', 'R_aper_3', 'G_aper_3', 'F515_aper_3')
colours0["F660 - r"] = x4_MAG_APER_aper
colours0["g - F515"] = y4_MAG_APER_aper
#Color
x5_MAG_APER_aper, y5_MAG_APER_aper = colour(tab_, 'G_aper_3', 'I_aper_3', 'F410_aper_3', 'F660_aper_3')
colours0["g - i"] = x5_MAG_APER_aper
colours0["F410 - F660"] = y5_MAG_APER_aper
#########################################################
#ERROR ##################################################
#########################################################
#Error Color vironen
ex1_MAG_APER_aper, ey1_MAG_APER_aper = errormag(tab_, 'e_R_aper_3', 'e_I_aper_3', 'e_R_aper_3', 'e_F660_aper_3')
colours0["e(r-i)"] = ex1_MAG_APER_aper
colours0["e(r-ha)"] = ey1_MAG_APER_aper
#Color
ex2_MAG_APER_aper, ey2_MAG_APER_aper = errormag(tab_, 'e_F515_aper_3', 'e_F861_aper_3', 'e_F515_aper_3', 'e_F660_aper_3')
colours0["e(F515 - F861)"] = ex2_MAG_APER_aper
colours0["e(F515 - F660)"] = ey2_MAG_APER_aper
#Color
ex3_MAG_APER_aper, ey3_MAG_APER_aper = errormag(tab_, 'e_Z_aper_3', 'e_G_aper_3', 'e_Z_aper_3', 'e_F660_aper_3')
colours0["e(z - g)"] = ex3_MAG_APER_aper
colours0["e(z - F660)"] = ey3_MAG_APER_aper
#Color
ex4_MAG_APER_aper, ey4_MAG_APER_aper = errormag(tab_, 'e_F660_aper_3', 'e_R_aper_3', 'e_G_aper_3', 'e_F515_aper_3')
colours0["e(F660 - r)"] = ex4_MAG_APER_aper
colours0["e(g - F515)"] = ey4_MAG_APER_aper
#Color
ex5_MAG_APER_aper, ey5_MAG_APER_aper = errormag(tab_, 'e_G_aper_3', 'e_I_aper_3', 'e_F410_aper_3', 'e_F660_aper_3')
colours0["e(g - i)"] = ex5_MAG_APER_aper
colours0["e(F410 - F660)"] = ey5_MAG_APER_aper


print("The number of objects is:", len(colours0["e(F410 - F660)"]))

# print(colours)
################################
#Definition to make of plots####
################################
current_palette = sns.color_palette()
sns.palplot(current_palette)
lgd_kws = {'frameon': True, 'fancybox': True, 'shadow': True}
sns.set_style('ticks')       
fig = plt.figure(figsize=(7, 6))
ax = fig.add_subplot(111)
ax.set_xlim(left=-3.7,right=3.7)
ax.set_ylim(bottom=-2.4,top=2.8)
plt.tick_params(axis='x', labelsize=22)
plt.tick_params(axis='y', labelsize=22)
plt.xlabel('$r - i$', size =22)
plt.ylabel('$r - J0660$', size =22) #edgecolor='black'
ax.scatter(colours0["r-i"], colours0["r-ha"], c=sns.xkcd_rgb['cerulean'], alpha=0.7, marker ='o', s=100, zorder=211.0, label='SMC PNe')
#ax.errorbar(colours0["r-i"], colours0["r-ha"], xerr=colours0["e(r-i)"], yerr=colours0["e(r-ha)"], marker='.', fmt='.', color= sns.xkcd_rgb["black"], elinewidth=0.9, markeredgewidth=0.9, capsize=3)
    
result = findIntersection(0.43, 0.65, -6.8, -1.3, 0.0)
result_y = 8.0*result + 4.50

x_new = np.linspace(-15.0, result, 200)
x_new2 = np.linspace(-15.0, result, 200)
y0 =  0.43*x_new + 0.65
yy = -6.8*x_new2 - 1.3
ax.plot(x_new, y0, color='k', linestyle='-.')
ax.plot(x_new2, yy , color='k', linestyle='-.')

# Region of the simbiotic stars
result1 = findIntersection(-220, +40.4, 0.39, 0.73, 0.0)
x_new_s = np.linspace(-15.5, result1, 200)
x_new2_s = np.linspace(result1, 15.5, 200)
y_s = -220*x_new_s + 40.4
yy_s = 0.39*x_new2_s + 0.73

# ax.plot(x_new_s, y_s, color='r', linestyle='--')
# ax.plot(x_new2_s, yy_s , color='r', linestyle='--')
plt.text(0.05, 0.92, 'hPN zone',
         transform=ax.transAxes, fontsize=22)
ax.minorticks_on()

# plt.text(0.56, 0.92, 'SySt Zone',
#          transform=ax.transAxes, color="red", fontsize=22)
# ax.minorticks_on()

#ax1.grid(which='minor')#, lw=0.3)
ax.legend(scatterpoints=1, ncol=2, fontsize=12.3, loc="lower right", **lgd_kws)
#ax.grid()
#sns.despine(bottom=True)
plt.tight_layout()
pltfile = 'Fig1-IDR2-SPLUS-vironen.pdf'
# save_path = '../../../../../Dropbox/paper-pne/Fig/'
# file_save = os.path.join(save_path, pltfile)
plt.savefig(pltfile)
#############################################################################################

'''
J0515 - J0861 vs J0515 - J0660
'''
lgd_kws = {'frameon': True, 'fancybox': True, 'shadow': True}
sns.set_style('ticks')       
fig = plt.figure(figsize=(7, 6))
ax1 = fig.add_subplot(111)
ax1.set_xlim(left=-5.8,right=6.4)
ax1.set_ylim(bottom=-4.5,top=5.7)
plt.tick_params(axis='x', labelsize=25)
plt.tick_params(axis='y', labelsize=25)
plt.xlabel('$J0515 - J0861$', size = 35)
plt.ylabel('$J0515 - J0660$', size = 35)
ax1.scatter(colours0["F515 - F861"], colours0["F515 - F660"], c=sns.xkcd_rgb['cerulean'], alpha=0.7, marker ='o', s=100,  zorder=211.0, label='PN candidate')
#ax1.errorbar(colours0["F515 - F861"], colours0["F515 - F660"], xerr=colours0["e(F515 - F861)"], yerr=colours0["e(F515 - F660)"], marker='.', fmt='.', color= sns.xkcd_rgb["black"], elinewidth=0.9, markeredgewidth=0.9, capsize=3)

# Region where are located the PNe
result = findIntersection(2.7, 2.15, 0.0, 0.22058956, 0.0)
result_y = 2.7*result + 2.15

x_new = np.linspace(result, 15.5, 200)
x_new2 = np.linspace(-10.0, result, 200)
x_new3 = np.linspace(-10.0, result, 200)
y = 2.7*x_new + 2.15
yy = 0.0*x_new2 + 0.22058956

ax1.plot(x_new, y, color='k', linestyle='-.')
ax1.plot(x_new2, yy , color='k', linestyle='-.')

# Region of the simbiotic stars
result1 = findIntersection(5.5, -6.45, 0.98, -0.16, 0.0)
x_new_s = np.linspace(result1, 15.5, 200)
x_new2_s = np.linspace(result1, 15.5, 200)
y_s = 5.5*x_new_s - 6.45
yy_s = 0.98*x_new2_s - 0.16

ax1.plot(x_new_s, y_s, color='r', linestyle='--')
ax1.plot(x_new2_s, yy_s , color='r', linestyle='--')

# source_label(ax1, "", x1_np_MAG_APER_6_0_0, y1_np_MAG_APER_6_0_0, dx=-45)
# source_label(ax1, "LEDA 2790884", x1_np_MAG_APER_6_0_3, y1_np_MAG_APER_6_0_3, dx=8)
# source_label(ax1, "LEDA 101538", x1_np_MAG_APER_6_0_1, y1_np_MAG_APER_6_0_1, dx=-72)
# source_label(ax1, "PN Sp 4-1", x1_np_MAG_APER_6_0_2, y1_np_MAG_APER_6_0_2, dx=-50)
# source_label_hash(ax1, "TK 1", x1_np_hast_MAG_APER_6_0, y1_np_hast_MAG_APER_6_0, 6034, dx=4, dy=-10)
# source_label_hash(ax1, "Kn J1857.7+3931", x1_np_hast_MAG_APER_6_0, y1_np_hast_MAG_APER_6_0, 3014, dx=-50, dy=13)
# source_label_hash(ax1, "KnPa J1848.6+4151", x1_np_hast_MAG_APER_6_0, y1_np_hast_MAG_APER_6_0, 45492, dy=10)
# source_label_hash(ax1, "Jacoby 1", x1_np_hast_MAG_APER_6_0, y1_np_hast_MAG_APER_6_0, 5598, dx=-42, dy=6)
# source_label_hash_s(ax1, "Fr 2-21", x1_np_hast_ISO_GAUSS_s, y1_np_hast_ISO_GAUSS_s, dx=-36, dy=-7)

plt.text(0.05, 0.91, 'hPN zone',
         transform=ax1.transAxes, fontsize=22)
# plt.text(0.56, 0.91, 'SySt Zone',
#          transform=ax1.transAxes, color="red", fontsize=22)
# ax1.minorticks_on()

ax1.minorticks_on()
#ax1.grid(which='minor')#, lw=0.3)
#ax1.legend(scatterpoints=1, ncol=2, fontsize=12.3, loc="lower right", **lgd_kws)
#ax1.grid()
plt.tight_layout()
pltfile = 'Fig2-IDR2-SPLUS-J0515_J0660.pdf'
#save_path = '../../../../../Dropbox/JPAS/paper-phot/'
#file_save = os.path.join(save_path, pltfile)
plt.savefig(pltfile)

plt.clf()
###########################################################
#############################################################
'''
z - g vs z - J0660
'''
lgd_kws = {'frameon': True, 'fancybox': True, 'shadow': True}
sns.set_style('ticks')       
fig = plt.figure(figsize=(7, 6))
ax2 = fig.add_subplot(111)
ax2.set_xlim(left=-5.9,right=3.9)
ax2.set_ylim(bottom=-5.,top=5.0)
plt.tick_params(axis='x', labelsize=25)
plt.tick_params(axis='y', labelsize=25)
plt.xlabel('$z - g$', size =35)
plt.ylabel('$z - J0660$', size =35)
ax2.scatter(colours0["z - g"], colours0["z - F660"], c=sns.xkcd_rgb['cerulean'], alpha=0.7, marker ='o', s=100,  zorder=211.0, label='PN candidate')
#ax2.errorbar(colours0["z - g"], colours0["z - F660"], xerr=colours0["e(z - g)"], yerr=colours0["e(z - F660)"], marker='.', fmt='.', color= sns.xkcd_rgb["black"], elinewidth=0.9, markeredgewidth=0.9, capsize=3)

result = findIntersection(0.35, 0.82, -0.8, 1.8, 0.0)
result_y = 0.2319*result + 0.85

x_new = np.linspace(result, 15.5, 200)
x_new2 = np.linspace(-10.0, result, 200)

y = 0.35*x_new + 0.82
yy = -0.8*x_new2 +  1.8
#Mask
#mask = y >= result_y - 0.5
ax2.plot(x_new, y, color='k', linestyle='-.')
ax2.plot(x_new2, yy , color='k', linestyle='-.')

# Region of the simbiotic stars=>
result1 = findIntersection(-1.96, -3.15, 0.2, 0.44, 0.0)
x_new_s = np.linspace(-15.5, result1, 200)
x_new2_s = np.linspace(-15.5, result1, 200)
y_s = -1.96*x_new_s - 3.15
yy_s = 0.2*x_new2_s + 0.44
# ax2.plot(x_new_s, y_s, color='r', linestyle='--')
# ax2.plot(x_new2_s, yy_s , color='r', linestyle='--')

# source_label(ax2, "", x2_np_MAG_APER_6_0_0, y2_np_MAG_APER_6_0_0, dx=-42)
# source_label(ax2, "LEDA 2790884", x2_np_MAG_APER_6_0_3, y2_np_MAG_APER_6_0_3, dx=-75, dy=7)
# source_label(ax2, "LEDA 101538", x2_np_MAG_APER_6_0_1, y2_np_MAG_APER_6_0_1, dy=-8)
# source_label(ax2, "PN Sp 4-1", x2_np_MAG_APER_6_0_2, y2_np_MAG_APER_6_0_2, dx=7, dy=-5)
# source_label_hash(ax2, "TK 1", x2_np_hast_MAG_APER_6_0, y2_np_hast_MAG_APER_6_0, 6034)
# source_label_hash(ax2, "Kn J1857.7+3931", x2_np_hast_MAG_APER_6_0, y2_np_hast_MAG_APER_6_0, 3014, dx=-85, dy=-5)#, dx=-85, dy=5)
# source_label_hash(ax2, "KnPa J1848.6+4151", x2_np_hast_MAG_APER_6_0, y2_np_hast_MAG_APER_6_0, 45492, dy=-10)
# source_label_hash(ax2, "Jacoby 1", x2_np_hast_MAG_APER_6_0, y2_np_hast_MAG_APER_6_0, 5598, dx=4, dy=-10)#, dx=-45, dy=-5)
# source_label_hash_s(ax2, "Fr 2-21", x2_np_hast_ISO_GAUSS_s, y2_np_hast_ISO_GAUSS_s, dx=-36, dy=7) 

plt.text(0.58, 0.92, 'hPN zone',
         transform=ax2.transAxes, fontsize=22)
# plt.text(0.03, 0.7, 'SySt Zone',
#          transform=ax2.transAxes, color="red", fontsize=22)
# ax2.minorticks_on()

ax2.minorticks_on()
#ax1.grid(which='minor')#, lw=0.3)
#ax2.legend(scatterpoints=1, ncol=2, fontsize=12.3, loc="lower right", **lgd_kws)
#ax2.grid()
#sns.despine(bottom=True)
plt.tight_layout()
plt.tight_layout()
pltfile = 'Fig3-IDR2-SPLUS-z.pdf'
#file_save = os.path.join(save_path, pltfile)
plt.savefig(pltfile)
plt.clf()
###############################################################
###############################################################
'''
J0660 - r vs g - J0515
'''
lgd_kws = {'frameon': True, 'fancybox': True, 'shadow': True}
sns.set_style('ticks')       
fig = plt.figure(figsize=(7, 6))
ax4 = fig.add_subplot(111)
ax4.set_xlim(left=-2.7,right=0.8)
ax4.set_ylim(bottom=-3.2,top=1.8)
plt.tick_params(axis='x', labelsize=25)
plt.tick_params(axis='y', labelsize=25)
plt.xlabel('$J0660 - r$', size =35)
plt.ylabel('$g - J0515$', size =35)
ax4.scatter(colours0["F660 - r"], colours0["g - F515"], c=sns.xkcd_rgb['cerulean'], alpha=0.7, marker ='o', s=100,  zorder=211.0, label='PN candidate')
#ax4.errorbar(colours0["F660 - r"], colours0["g - F515"], xerr=colours0["e(F660 - r)"], yerr=colours0["e(g - F515)"], marker='.', fmt='.', color= sns.xkcd_rgb["black"], elinewidth=0.9, markeredgewidth=0.9, capsize=3)

# Region where are located the PNe
result = findIntersection(0.12, -0.01, -1.1, -1.07, 0.0)
result_y = 0.12*result - 0.01

x_new = np.linspace(-15.5, result,  200)
x_new2 = np.linspace(result, 10.0, 200)
x_new3 = np.linspace(-10.0, 1.1, 200)
y = 0.12*x_new - 0.01
yy = -1.1*x_new2 - 1.07
#Mask
#mask = y >= result_y - 0.5
ax4.plot(x_new, y, color='k', linestyle='-.')
ax4.plot(x_new2, yy , color='k', linestyle='-.')

# Region of the simbiotic stars
result1 = findIntersection(-0.19, -0.05, -2.66, -2.2, 0.0)
x_new_s = np.linspace(-15.5, result1, 200)
x_new2_s = np.linspace(-15.0, result1, 200)
y_s = -0.19*x_new_s - 0.09
yy_s = -2.66*x_new2_s - 2.2

plt.text(0.05, 0.07, 'hPN zone',
         transform=ax4.transAxes, fontsize=22)
plt.text(0.05, 0.92, 'SySt Zone',
         transform=ax4.transAxes, color="red", fontsize=22)
# ax4.minorticks_on()

ax4.minorticks_on()
#ax1.grid(which='minor')#, lw=0.3)
#ax4.legend(scatterpoints=1, fontsize=15.0, loc="lower right", **lgd_kws)
#ax4.grid()
#sns.despine(bottom=True)
plt.tight_layout()
pltfile = 'Fig4-IDR2-SPLUS-g.pdf'
#file_save = os.path.join(save_path, pltfile)
plt.savefig(pltfile)
plt.clf()

####################################################################################
####################################################################################
'''
g - i vs J0410 - J0660
'''
lgd_kws = {'frameon': True, 'fancybox': True, 'shadow': True}
sns.set_style('ticks')       
fig = plt.figure(figsize=(7, 6))
ax5 = fig.add_subplot(111)
ax5.set_xlim(left=-3.0,right=5.0)
ax5.set_ylim(bottom=-2.0,top=6.0)

plt.tick_params(axis='x', labelsize=25)
plt.tick_params(axis='y', labelsize=25)
plt.xlabel('$g - i$', size=35)
plt.ylabel('$J0410 - J0660$', size =35)
ax5.scatter(colours0["g - i"], colours0["F410 - F660"], c=sns.xkcd_rgb['cerulean'], alpha=0.7, s=100,  zorder=211.0, label='PN candidate')
#ax5.errorbar(colours0["g - i"], colours0["F410 - F660"], xerr=colours0["e(g - i)"], yerr=colours0["e(F410 - F660)"],  marker='.', fmt='.', color= sns.xkcd_rgb["light orange"], elinewidth=0.9, markeredgewidth=0.9, alpha=0.3, capsize=3)

# Region where are located the PNe
result = findIntersection(8.0, 4.50, 0.8, 0.55, 0.0)
result_y = 8.0*result + 4.50

x_new = np.linspace(result, 15.5, 200)
x_new2 = np.linspace(-10.0, result, 200)
x_new3 = np.linspace(-10.0, 1.1, 200)
y =  8.0*x_new + 4.50
yy = 0.8*x_new2 + 0.55
#Mask
#mask = y >= result_y - 0.5
ax5.plot(x_new, y, color='k', linestyle='-.')
ax5.plot(x_new2, yy , color='k', linestyle='-.')

# Region of the simbiotic stars
result1 = findIntersection(-5.2, +10.60, 2.13, -1.43, 0.0)
x_new_s = np.linspace(-15.5, result1, 200)
x_new2_s = np.linspace(result1, 15.5, 200)
y_s = -5.2*x_new_s + 10.60
yy_s = 2.13*x_new2_s - 1.43

ax5.plot(x_new_s, y_s, color='r', linestyle='--')
ax5.plot(x_new2_s, yy_s , color='r', linestyle='--')

# source_label(ax5, "", x5_np_MAG_APER_6_0_0, y5_np_MAG_APER_6_0_0, dy=-4.5)
# source_label(ax5, "LEDA 2790884", x5_np_MAG_APER_6_0_3, y5_np_MAG_APER_6_0_3, dx=10, dy=-4.5)
# source_label(ax5, "LEDA 101538", x5_np_MAG_APER_6_0_1, y5_np_MAG_APER_6_0_1, dx=-65, dy=-4.5)
# source_label(ax5, "PN Sp 4-1", x5_np_MAG_APER_6_0_2, y5_np_MAG_APER_6_0_2, dx= -50, dy=-4.5)
# source_label_hash(ax5, "TK 1", x5_np_hast_MAG_APER_6_0, y5_np_hast_MAG_APER_6_0, 6034, dy=-5)
# source_label_hash(ax5, "Kn J1857.7+3931", x5_np_hast_MAG_APER_6_0, y5_np_hast_MAG_APER_6_0, 3014)#, dx=-85)
# source_label_hash(ax5, "KnPa J1848.6+4151", x5_np_hast_MAG_APER_6_0, y5_np_hast_MAG_APER_6_0, 45492, dy=10)
# source_label_hash(ax5, "Jacoby 1", x5_np_hast_MAG_APER_6_0, y5_np_hast_MAG_APER_6_0, 5598, dx=-46, dy=-5)
# source_label_hash_s(ax5, "Fr 2-21", x5_np_hast_ISO_GAUSS_s, y5_np_hast_ISO_GAUSS_s, dx=-36, dy=8)

plt.text(0.03, 0.90, 'hPN zone',
         transform=ax5.transAxes, fontsize=22)

# plt.text(0.5, 0.93, 'SySt Zone',
#          transform=ax5.transAxes,color="red", fontsize=22)

ax5.minorticks_on()
#ax1.grid(which='minor')#, lw=0.3)
#ax5.legend(scatterpoints=1, fontsize=15.0, loc='lower right', **lgd_kws)
#ax5.grid()
#sns.despine(bottom=True)
plt.tight_layout()
plt.tight_layout()
pltfile = 'Fig5-IDR2-SPLUS-gi.pdf'
#file_save = os.path.join(save_path, pltfile)
plt.savefig(pltfile)

#+END_SRC
   
     For this the file must be pne-smc-splus-match-2007.fits

 + I made the S-spectrum for all the objects. I also wrote the a new program based on the other to display the spectrum:

                             python ../new-programs/photo-spectra-SPLUSDR2-v2.py pne-smc-splus-match-2007 --debug  
#+BEGIN_SRC python :eval no :photo-spectra-SPLUSDR2-v2.py

'''
Make photo-spectra from observed SPLUS objects. This program is an updated version of the program: photo-spectra-SPLUSDR2.py.
I madified this one to work with SPLUS SMC catalog
'''
from __future__ import print_function
import numpy as np
import glob
import json
import matplotlib.pyplot as plt
from astropy.table import Table
#import seaborn as sns
import sys
import argparse
import os
from colour import Color

Number = []

wl = [3485, 3785, 3950, 4100, 4300, 4803, 5150, 6250, 6600, 7660, 8610, 9110]
color = ["#CC00FF", "#9900FF", "#6600FF", "#0000FF", "#009999", "#006600", "#DD8000", "#FF0000", "#CC0066", "#990033", "#660033", "#330034"]
marker = ["s", "o", "o", "o", "o", "s", "o", "s", "o", "s", "o", "s"] ### tienen todos los filtros

# wl1 = [3785, 3950, 4100, 4300, 4803, 5150, 6250, 6600, 7660, 8610, 9110]
# color1 = [ "#9900FF", "#6600FF", "#0000FF", "#009999", "#006600", "#DD8000", "#FF0000", "#CC0066", "#990033", "#660033", "#330034"]
# marker1 = [ "o", "o", "o", "o", "s", "o", "s", "o", "s", "o", "s"] # No tiene el primer filtro


parser = argparse.ArgumentParser(
    description="""Write wave and magnitude of a spectrum""")

parser.add_argument("source", type=str,
                    default="known-PN-jplus-idr",
                    help="Name of source, taken the prefix ")

parser.add_argument("--debug", action="store_true",
                    help="Print out verbose debugging info about each line in region file")

args = parser.parse_args()
file_ = args.source + ".dat"


data = Table.read(file_, format="ascii")
n = data["RA"]

Number = []
mag_auto  = [[] for _ in range(len(n))]
mag_petro = [[] for _ in range(len(n))]
mag_aper = [[] for _ in range(len(n))]

#Error
mag_auto_err  = [[] for _ in range(len(n))]
mag_petro_err  = [[] for _ in range(len(n))]
mag_aper_err  = [[] for _ in range(len(n))]

print(len(n))
#sys.exit()

for i in range(len(n)):
    mag_aper[i].append(data["U_aper_3"][i]) #aper
    mag_aper[i].append(data["F378_aper_3"][i])
    mag_aper[i].append(data["F395_aper_3"][i])
    mag_aper[i].append(data["F410_aper_3"][i])
    mag_aper[i].append(data["F430_aper_3"][i])
    mag_aper[i].append(data["G_aper_3"][i])
    mag_aper[i].append(data["F515_aper_3"][i]) 
    mag_aper[i].append(data["R_aper_3"][i]) 
    mag_aper[i].append(data["F660_aper_3"][i])
    mag_aper[i].append(data["I_aper_3"][i]) 
    mag_aper[i].append(data["F861_aper_3"][i]) 
    mag_aper[i].append(data["Z_aper_3"][i])
    #Petro
    mag_auto[i].append(data["U_auto"][i]) #auto
    mag_auto[i].append(data["F378_auto"][i])
    mag_auto[i].append(data["F395_auto"][i])
    mag_auto[i].append(data["F410_auto"][i])
    mag_auto[i].append(data["F430_auto"][i])
    mag_auto[i].append(data["G_auto"][i])
    mag_auto[i].append(data["F515_auto"][i]) 
    mag_auto[i].append(data["R_auto"][i]) 
    mag_auto[i].append(data["F660_auto"][i])
    mag_auto[i].append(data["I_auto"][i]) 
    mag_auto[i].append(data["F861_auto"][i]) 
    mag_auto[i].append(data["Z_auto"][i])
    #Petro
    mag_petro[i].append(data["U_petro"][i])
    mag_petro[i].append(data["F378_petro"][i])
    mag_petro[i].append(data["F395_petro"][i])
    mag_petro[i].append(data["F410_petro"][i])
    mag_petro[i].append(data["F430_petro"][i])
    mag_petro[i].append(data["G_petro"][i])
    mag_petro[i].append(data["F515_petro"][i]) 
    mag_petro[i].append(data["R_petro"][i]) 
    mag_petro[i].append(data["F660_petro"][i])
    mag_petro[i].append(data["I_petro"][i]) 
    mag_petro[i].append(data["F861_petro"][i]) 
    mag_petro[i].append(data["Z_petro"][i])

    #ERRO Aper
    mag_aper_err[i].append(float(data["e_U_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_F378_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_F395_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_F410_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_F430_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_G_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_F515_aper_3"][i])) 
    mag_aper_err[i].append(float(data["e_R_aper_3"][i])) 
    mag_aper_err[i].append(float(data["e_F660_aper_3"][i])) 
    mag_aper_err[i].append(float(data["e_I_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_F861_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_Z_aper_3"][i]))
   
    #ERRO AUTO
    mag_auto_err[i].append(float(data["e_U_auto"][i]))
    mag_auto_err[i].append(float(data["e_F378_auto"][i]))
    mag_auto_err[i].append(float(data["e_F395_auto"][i]))
    mag_auto_err[i].append(float(data["e_F410_auto"][i]))
    mag_auto_err[i].append(float(data["e_F430_auto"][i]))
    mag_auto_err[i].append(float(data["e_G_auto"][i]))
    mag_auto_err[i].append(float(data["e_F515_auto"][i])) 
    mag_auto_err[i].append(float(data["e_R_auto"][i])) 
    mag_auto_err[i].append(float(data["e_F660_auto"][i]))
    mag_auto_err[i].append(float(data["e_I_auto"][i]))
    mag_auto_err[i].append(float(data["e_F861_auto"][i]))
    mag_auto_err[i].append(float(data["e_Z_auto"][i]))

    #ERRO petro
    mag_petro_err[i].append(data["e_U_petro"][i])
    mag_petro_err[i].append(data["e_F378_petro"][i])
    mag_petro_err[i].append(data["e_F395_petro"][i])
    mag_petro_err[i].append(data["e_F410_petro"][i])
    mag_petro_err[i].append(data["e_F430_petro"][i])
    mag_petro_err[i].append(data["e_G_petro"][i])
    mag_petro_err[i].append(data["e_F515_petro"][i]) 
    mag_petro_err[i].append(data["e_R_petro"][i]) 
    mag_petro_err[i].append(data["e_F660_petro"][i])
    mag_petro_err[i].append(data["e_I_petro"][i]) 
    mag_petro_err[i].append(data["e_F861_petro"][i]) 
    mag_petro_err[i].append(data["e_Z_petro"][i])

    font = {'family': 'serif',
        'color':  'black',
        'weight': 'normal',
        'size': 16,
        }
    ##########################################################################################
    # Plotting -- Aper  ######################################################################
    ##########################################################################################
    plotfile = "photopectrum_splus_"+str(data["ID"][i].split("S.")[-1].split(".g")[0]).replace(".", "-")+"_aper.pdf"
    fig = plt.figure(figsize=(15.5, 9.5))
    ax = fig.add_subplot(1,1,1)
    plt.tick_params(axis='x', labelsize=42) 
    plt.tick_params(axis='y', labelsize=42)
    ax.set_xlim(left=3000, right=9700)
    #ax.set_ylim(ymin=17.5,ymax=23)
    #ax1.set_xlabel(r'$\lambda$')
    ax.set_xlabel(r'Wavelength $[\mathrm{\AA]}$', fontsize = 44)
    ax.set_ylabel(r'Magnitude [AB]', fontsize = 44)
    ax.plot(wl, mag_aper[i], '-k', alpha=0.2)#, label='Auto')
    for wl1, mag, mag_err, colors, marker_ in zip(wl, mag_aper[i], mag_aper_err[i], color, marker):
        ax.scatter(wl1, mag, color = colors, marker=marker_, s=600, zorder=10)
        ax.errorbar(wl1, mag, yerr=mag_err, marker='.', fmt='.', color=colors, ecolor=colors, elinewidth=5.9, markeredgewidth=5.2,  capsize=20)
    # plt.text(0.06, 0.1, "Fr 2-21",
    #          transform=ax.transAxes, fontsize=48,  fontdict=font)
    #plt.subplots_adjust(bottom=0.19)
    plt.legend(fontsize=20.0)
    plt.tight_layout()
    plt.gca().invert_yaxis()
    #save_path = '../../../Dropbox/JPAS/paper-phot/'
    #file_save = os.path.join(save_path, plotfile)
    plt.savefig(plotfile)
    plt.clf()
    ##########################################################################################
    # Plotting -- Auto  ######################################################################
    ##########################################################################################
    plotfile = "photopectrum_splus_"+str(data["ID"][i].split("S.")[-1].split(".g")[0]).replace(".", "-")+"_auto.pdf"
    fig = plt.figure(figsize=(15.5, 9.5))
    ax = fig.add_subplot(1,1,1)
    plt.tick_params(axis='x', labelsize=42) 
    plt.tick_params(axis='y', labelsize=42)
    ax.set_xlim(left=3000, right=9700)
    #ax.set_ylim(ymin=17.5,ymax=23)
    #ax1.set_xlabel(r'$\lambda$')
    ax.set_xlabel(r'Wavelength $[\mathrm{\AA]}$', fontsize = 44)
    ax.set_ylabel(r'Magnitude [AB]', fontsize = 44)
    ax.plot(wl, mag_auto[i], '-k', alpha=0.2)#, label='Auto')
    for wl1, mag, mag_err, colors, marker_ in zip(wl, mag_auto[i], mag_auto_err[i], color, marker):
        ax.scatter(wl1, mag, color = colors, marker=marker_, s=600, zorder=10)
        ax.errorbar(wl1, mag, yerr=mag_err, marker='.', fmt='.', color=colors, ecolor=colors, elinewidth=5.9, markeredgewidth=5.2,  capsize=20)
    # plt.text(0.06, 0.1, "Fr 2-21",
    #          transform=ax.transAxes, fontsize=48,  fontdict=font)
    #plt.subplots_adjust(bottom=0.19)
    plt.legend(fontsize=20.0)
    plt.tight_layout()
    plt.gca().invert_yaxis()
    #save_path = '../../../Dropbox/JPAS/paper-phot/'
    #file_save = os.path.join(save_path, plotfile)
    plt.savefig(plotfile)
    plt.clf()
    ##########################################################################################
    #PETRO####################################################################################
    ##########################################################################################
    plotfile = "photopectrum_splus_"+str(data["ID"][i].split("S.")[-1].split(".g")[0]).replace(".", "-")+"_petro.pdf"
    fig = plt.figure(figsize=(15.5, 9.5))
    ax1 = fig.add_subplot(1,1,1)
    plt.tick_params(axis='x', labelsize=42) 
    plt.tick_params(axis='y', labelsize=42)
    ax1.set_xlim(left=3000, right=9700)
    #ax.set_ylim(ymin=17.5,ymax=23)
    #ax1.set_xlabel(r'$\lambda$')
    ax1.set_xlabel(r'Wavelength $[\mathrm{\AA]}$', fontsize = 44)
    ax1.set_ylabel(r'Magnitude [AB]', fontsize = 44)
    ax1.plot(wl, mag_petro[i], '-k', alpha=0.2)#, label='Auto')
    for wl1, mag_1, mag_err_1, colors, marker_ in zip(wl, mag_petro[i], mag_petro_err[i], color, marker):
        ax1.scatter(wl1, mag_1, color = colors, marker=marker_, s=600, zorder=10)
        ax1.errorbar(wl1, mag_1, yerr=mag_err_1, marker='.', fmt='.', color=colors, ecolor=colors, elinewidth=5.9, markeredgewidth=5.2,  capsize=20)
    # plt.text(0.06, 0.1, "Fr 2-21",
    #          transform=ax.transAxes, fontsize=48,  fontdict=font)
    #plt.subplots_adjust(bottom=0.19)
    plt.legend(fontsize=20.0)
    plt.tight_layout()
    plt.gca().invert_yaxis()
    #save_path = '../../../Dropbox/JPAS/paper-phot/'
    #file_save = os.path.join(save_path, plotfile)
    plt.savefig(plotfile)
    plt.clf()


#+END_SRC    
   For this the file must be pne-smc-splus-match-2007.dat
 
 + All is resumed in the file pne-smc-splus.tex.
     - For that I wrote a program to made the table eith of th figures (photospectrum,): python ../varios-programas/latex-figs.py

#+BEGIN_SRC python :eval no :tangle latex-figs.py     

      from astropy.io import fits
      import os
      import glob
      import json
      import matplotlib.pyplot as plt
      import pandas as pd
      #import StringIO
      from astropy.table import Table
      import seaborn as sns
      import sys
      from scipy.optimize import fsolve
      import colours

      #Read de files
      pattern = "*aper.pdf"
      file_list = glob.glob(pattern)

      pattern1 = "*auto.pdf"
      file_list1 = glob.glob(pattern1)

      pattern2 = "*petro.pdf"
      file_list2 = glob.glob(pattern2)

      latex_columns = ['Aper_3', 'Auto', 'Petro']
    
      #print('\n'.join(map(lambda x: 'Test{0:04}'.format(x), range(0, 10000))))

      ap3, apa, app = [], [], []
      for a, b, c in zip(file_list, file_list1, file_list2):
          ap3.append(a)
          apa.append(b)
          app.append(c)

      ap3.sort()
      apa.sort()
      app.sort()
      table_fig = Table([ap3, apa, app],  names=('Aper_3', 'Auto', 'Petro'), meta={'name': 'first table'})
      #table_fig.sort('Auto')
      table_fig.write('table-figs.tex', format = "ascii.latex", overwrite=True) 
  
#+END_SRC

*** Making the images of the objects.
+ I wrote the DS9 region for each PNe using ipython/Write DS9 region.
+ I converted the .fz to .fits using for D in ./MC*; do if [ -d “$D” ]; then cd “$D”; for f in *.fz; do python ../varios-programas/convert-fz-fits.py ${f%.fz}; done; cd ..; fi; done

#+BEGIN_SRC python: convert fz to fits

    '''
    Based on the progam of Gabriel.
    Original vrsion: covert.py
    '''
    from astropy.io import fits, ascii
    import os
    import argparse

    def fz2fits(image):
        """
        It converts SPLUS images
        from .fz to .fits
        """
        datos = fits.open(image)[1].data
        heada = fits.open(image)[1].header
        imageout = image[:-2] + 'fits'
        print ('Creating file: ')
        print (imageout)
        fits.writeto(imageout, datos, heada, overwrite=True)

    parser = argparse.ArgumentParser(
        description="""Make a table from the S-PLUS catalogs """)

    parser.add_argument("fzfile", type=str,
                      default="teste-program",
                        help="Name of catalog, taken the prefix ")

    cmd_args = parser.parse_args()
    fzfile_ = cmd_args.fzfile + ".fz"
 
    fz2fits(fzfile_)

#+END_SRC

+ Cut the images centered in the object, I used the program; cut-images-fits.py

#+BEGIN_SRC python : cut images

'''
Cuting images fits
Based in pyFIST.py and extract-image.py from Henney program

'''
from __future__ import print_function
import numpy as np
import json
import os
from astropy.io import fits
from astropy import wcs
from astropy.wcs import WCS
from astropy import coordinates as coord
from astropy import units as u 
import argparse
import sys


parser = argparse.ArgumentParser(
    description="""Cut images from fits files""")

parser.add_argument("source", type=str,
                    default="1000001-JPLUS-02363-v2_J0660_swp",
                    help="Name of source (prefix for files) ")

parser.add_argument("--position", type=str,
                    default="HYDRA-0026-000010640-position",
                    help="Find the DS9 region")

parser.add_argument("--debug", action="store_true",
                    help="Print out verbose debugging info about each line in region file")

args = parser.parse_args()
regionfile = args.source + ".fits"

path1 = "../"
try:
    hdu = fits.open(os.path.join(path1, regionfile))
except FileNotFoundError:
    hdu = fits.open(regionfile)
    
crop_coords_unit=u.degree

position = args.position + ".reg"
ra, dec = [], []

f = open(position, 'r')
header1 = f.readline()
header2 = f.readline()
header3 = f.readline()
for line in f:
    line = line.strip()
    columns = line.split()
    coor = line.split("(")[-1].split("\"")[0]
    ra1, dec1 = coor.split(",")[0:2]
    crop_c = coord.SkyCoord(ra1, dec1, unit=(u.degree, u.degree))
    #locc = sys.argv[1:]
    # ra = input('Enter RA: ')
    # dec = input('Enter DEC: ')
    # ra = args.ra
    # dec = args.dec
    print(crop_c)
    w = wcs.WCS(hdu[0].header)
    print(w)
    #crop_coords = np.array(w.wcs_pix2world(hdu[0].data.shape[0]/2., 
				       #hdu[0].data.shape[1]/2., 0))
  
    #crop_c = coord.SkyCoord(crop_coords[0], crop_coords[1], unit=u.degree)

    #crop_radius=input('Enter Radius: ')
    crop_radius = 100*u.arcsec # es el que estoy usando cuando conozco la White Dwarf
    #crop_radius = 28.0*u.arcsec
    #crop_radius = 20.0*u.arcsec
    crop_radius = 5.0*u.arcsec
    pix_scale = 0.0996*u.arcsec
    
    crop_c_pix = w.wcs_world2pix(crop_c.ra.degree, crop_c.dec.degree, 0)
    crop_radius_pixels = crop_radius.to(u.arcsec) / pix_scale.to(u.arcsec)
   
    x1 = int(np.clip(crop_c_pix[0]-crop_radius_pixels, 0, hdu[0].data.shape[0]-1))
    x2 = int(np.clip(crop_c_pix[0]+crop_radius_pixels, 0, hdu[0].data.shape[0]-1))
    y1 = int(np.clip(crop_c_pix[1]-crop_radius_pixels, 0, hdu[0].data.shape[1]-1))
    y2 = int(np.clip(crop_c_pix[1]+crop_radius_pixels, 0, hdu[0].data.shape[1]-1))
    

    hdu[0].data = hdu[0].data[y1:y2, x1:x2]
    
    hdu[0].header['CRPIX1'] -= x1
    hdu[0].header['CRPIX2'] -= y1
    # hdu[0].header['CRVAL1'] = crop_c.ra.degree
    # hdu[0].header['CRVAL2'] = crop_c.dec.degree
    w = WCS(hdu[0].header)
    
    #################### 
    #Save the new file##
    ####################
    outfile = regionfile.replace("_swp.fits", "_{}_swp-crop.fits".format(position.split("15-")[-1].split("-p")[0]))
    new_hdu = fits.PrimaryHDU(hdu[0].data, header=hdu[0].header)
    new_hdu.writeto(outfile, output_verify="fix", overwrite=True)

#+END_SRC

The only problem it is the program is no so autmatic I have to change manually " outfile = regionfile.replace("_swp.fits", "_{}_swp-crop.fits".format(position.split("15-")[-1].split("-p")[0]))"
I have to fix that.
