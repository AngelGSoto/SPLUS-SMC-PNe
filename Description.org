#+TITLE: SMC PNe in SPLUS
#+EMAIL: gsoto.angel@gmail.com
* SMC Planetary nebula in SPLUS

  Given that the SMC was observed by S-PLUS and i is already available a catalog of SMC SPLUS, I am going to looking for new PNe in this galaxy. For that I will apply my SPLUS color criteria 
and the statistical techniques (PCA, logistic regression, LDA). SMC was fully  observed, this means that many PNe should be in the SPLUS SMC catalog.
So to explore the possibility to find for new PNe, I verified that by using known PNe and putted them in my colour diagrams and I will try to classify them like Pne
using the statistical techniques. 

** Data verification
 + I found this sample of SMC PNe: vizier-> J/A+A/472/101/table7. Chemical evolution of SMC planetary nebulae (Idiart+, 2007, 2007A&A...472..101I)
   This catalog has 46 PNe - > The file is pne-smc-2007.csv.
 + I made cross matching  between this catalog and SPLUS catalog. I found 21 matches using a 1 arcsec of radii. The file is pne-smc-splus-match-2007.fits (.dat)
 + I putted the final matches in my diagram, the good news is that all the object, except 3, are located in the PNe region.
   - One of this three is a SySt (SMC 1), it are located in the region of SySt in the color-color diagrams.
   - For that I wrote a new program to make the color-colour diagrams with this sample. I did this, because the name of the 
     columns of table of the SPLUS SMC catalog are different, the program is: 

                           : python ../varios-programas/color-diagrams-splusdr2_automatic-v2.py pne-smc-splus-match-2007

#+BEGIN_SRC python :eval no :tangle color-diagrams-splusdr2_automatic-v2.py
'''
Read the file from S-PLUS IDR2 WDs to make the colour-colour diagrams
'''
from __future__ import print_function
import numpy as np
from astropy.io import fits
import os
import glob
import json
import matplotlib.pyplot as plt
import pandas as pd
#import StringIO
from astropy.table import Table
import seaborn as sns
import sys
from scipy.optimize import fsolve
import colours
import argparse

#The equation the represent the criteria
def findIntersection(m, y, m1, y1, x0):
    x = np.linspace(-10.0, 15.5, 200)
    return fsolve(lambda x : (m*x + y) - (m1*x + y1), x0)

def colour(Aper, f1, f2, f3, f4):
    xcolour = Aper[f1] - Aper[f2]
    ycolour = Aper[f3] - Aper[f4]
    return xcolour, ycolour

#Error
def errormag(Aper, ef1, ef2, ef3, ef4):
    excolour = np.sqrt(Aper[ef1]**2 + Aper[ef1]**2)
    eycolour = np.sqrt(Aper[ef3]**2 + Aper[ef4]**2)
    return excolour, eycolour


parser = argparse.ArgumentParser(
    description="""Make a table from the S-PLUS catalogs """)

parser.add_argument("filesurce", type=str,
                    default="teste-program",
                    help="Name of catalog, taken the prefix ")

cmd_args = parser.parse_args()
fitsfile = cmd_args.filesurce + ".fits"

#Creating  dictionary
col_names = ["r-i", "r-ha", "F515 - F861", "'F515 - F660", 
             "z - g", "z - F660", "F660 - r", "g - F515", "g - i", 
             "F410 - F660", "e(r-i)", "e(r-ha)", "e(F515 - F861)", "e(F515 - F660)", 
             "e(z - g)", "e(z - F660)", "e(F660 - r)", "e(g - F515)", "e(g - i)", 
             "e(F410 - F660)"]

nsourse = len(fitsfile)
colours0 = {c: [np.empty((nsourse,))] for c in col_names}

#Read de files
hdu = fits.open(fitsfile)
tab_ = hdu[1].data
#########################################################################
#Calor Auto#############################################################
#########################################################################
#Color vironen
x1_MAG_APER_aper, y1_MAG_APER_aper = colour(tab_, 'R_aper_3', 'I_aper_3', 'R_aper_3', 'F660_aper_3')
colours0["r-i"] = x1_MAG_APER_aper
colours0["r-ha"] = y1_MAG_APER_aper
#Color
x2_MAG_APER_aper, y2_MAG_APER_aper = colour(tab_, 'F515_aper_3', 'F861_aper_3', 'F515_aper_3', 'F660_aper_3')
colours0["F515 - F861"] = x2_MAG_APER_aper
colours0["F515 - F660"] = y2_MAG_APER_aper
#Color
x3_MAG_APER_aper, y3_MAG_APER_aper = colour(tab_, 'Z_aper_3', 'G_aper_3', 'Z_aper_3', 'F660_aper_3')
colours0["z - g"] = x3_MAG_APER_aper
colours0["z - F660"] = y3_MAG_APER_aper
#Color
x4_MAG_APER_aper, y4_MAG_APER_aper = colour(tab_, 'F660_aper_3', 'R_aper_3', 'G_aper_3', 'F515_aper_3')
colours0["F660 - r"] = x4_MAG_APER_aper
colours0["g - F515"] = y4_MAG_APER_aper
#Color
x5_MAG_APER_aper, y5_MAG_APER_aper = colour(tab_, 'G_aper_3', 'I_aper_3', 'F410_aper_3', 'F660_aper_3')
colours0["g - i"] = x5_MAG_APER_aper
colours0["F410 - F660"] = y5_MAG_APER_aper
#########################################################
#ERROR ##################################################
#########################################################
#Error Color vironen
ex1_MAG_APER_aper, ey1_MAG_APER_aper = errormag(tab_, 'e_R_aper_3', 'e_I_aper_3', 'e_R_aper_3', 'e_F660_aper_3')
colours0["e(r-i)"] = ex1_MAG_APER_aper
colours0["e(r-ha)"] = ey1_MAG_APER_aper
#Color
ex2_MAG_APER_aper, ey2_MAG_APER_aper = errormag(tab_, 'e_F515_aper_3', 'e_F861_aper_3', 'e_F515_aper_3', 'e_F660_aper_3')
colours0["e(F515 - F861)"] = ex2_MAG_APER_aper
colours0["e(F515 - F660)"] = ey2_MAG_APER_aper
#Color
ex3_MAG_APER_aper, ey3_MAG_APER_aper = errormag(tab_, 'e_Z_aper_3', 'e_G_aper_3', 'e_Z_aper_3', 'e_F660_aper_3')
colours0["e(z - g)"] = ex3_MAG_APER_aper
colours0["e(z - F660)"] = ey3_MAG_APER_aper
#Color
ex4_MAG_APER_aper, ey4_MAG_APER_aper = errormag(tab_, 'e_F660_aper_3', 'e_R_aper_3', 'e_G_aper_3', 'e_F515_aper_3')
colours0["e(F660 - r)"] = ex4_MAG_APER_aper
colours0["e(g - F515)"] = ey4_MAG_APER_aper
#Color
ex5_MAG_APER_aper, ey5_MAG_APER_aper = errormag(tab_, 'e_G_aper_3', 'e_I_aper_3', 'e_F410_aper_3', 'e_F660_aper_3')
colours0["e(g - i)"] = ex5_MAG_APER_aper
colours0["e(F410 - F660)"] = ey5_MAG_APER_aper


print("The number of objects is:", len(colours0["e(F410 - F660)"]))

# print(colours)
################################
#Definition to make of plots####
################################
current_palette = sns.color_palette()
sns.palplot(current_palette)
lgd_kws = {'frameon': True, 'fancybox': True, 'shadow': True}
sns.set_style('ticks')       
fig = plt.figure(figsize=(7, 6))
ax = fig.add_subplot(111)
ax.set_xlim(left=-3.7,right=3.7)
ax.set_ylim(bottom=-2.4,top=2.8)
plt.tick_params(axis='x', labelsize=22)
plt.tick_params(axis='y', labelsize=22)
plt.xlabel('$r - i$', size =22)
plt.ylabel('$r - J0660$', size =22) #edgecolor='black'
ax.scatter(colours0["r-i"], colours0["r-ha"], c=sns.xkcd_rgb['cerulean'], alpha=0.7, marker ='o', s=100, zorder=211.0, label='SMC PNe')
#ax.errorbar(colours0["r-i"], colours0["r-ha"], xerr=colours0["e(r-i)"], yerr=colours0["e(r-ha)"], marker='.', fmt='.', color= sns.xkcd_rgb["black"], elinewidth=0.9, markeredgewidth=0.9, capsize=3)
    
result = findIntersection(0.43, 0.65, -6.8, -1.3, 0.0)
result_y = 8.0*result + 4.50

x_new = np.linspace(-15.0, result, 200)
x_new2 = np.linspace(-15.0, result, 200)
y0 =  0.43*x_new + 0.65
yy = -6.8*x_new2 - 1.3
ax.plot(x_new, y0, color='k', linestyle='-.')
ax.plot(x_new2, yy , color='k', linestyle='-.')

# Region of the simbiotic stars
result1 = findIntersection(-220, +40.4, 0.39, 0.73, 0.0)
x_new_s = np.linspace(-15.5, result1, 200)
x_new2_s = np.linspace(result1, 15.5, 200)
y_s = -220*x_new_s + 40.4
yy_s = 0.39*x_new2_s + 0.73

# ax.plot(x_new_s, y_s, color='r', linestyle='--')
# ax.plot(x_new2_s, yy_s , color='r', linestyle='--')
plt.text(0.05, 0.92, 'hPN zone',
         transform=ax.transAxes, fontsize=22)
ax.minorticks_on()

# plt.text(0.56, 0.92, 'SySt Zone',
#          transform=ax.transAxes, color="red", fontsize=22)
# ax.minorticks_on()

#ax1.grid(which='minor')#, lw=0.3)
ax.legend(scatterpoints=1, ncol=2, fontsize=12.3, loc="lower right", **lgd_kws)
#ax.grid()
#sns.despine(bottom=True)
plt.tight_layout()
pltfile = 'Fig1-IDR2-SPLUS-vironen.pdf'
# save_path = '../../../../../Dropbox/paper-pne/Fig/'
# file_save = os.path.join(save_path, pltfile)
plt.savefig(pltfile)
#############################################################################################

'''
J0515 - J0861 vs J0515 - J0660
'''
lgd_kws = {'frameon': True, 'fancybox': True, 'shadow': True}
sns.set_style('ticks')       
fig = plt.figure(figsize=(7, 6))
ax1 = fig.add_subplot(111)
ax1.set_xlim(left=-5.8,right=6.4)
ax1.set_ylim(bottom=-4.5,top=5.7)
plt.tick_params(axis='x', labelsize=25)
plt.tick_params(axis='y', labelsize=25)
plt.xlabel('$J0515 - J0861$', size = 35)
plt.ylabel('$J0515 - J0660$', size = 35)
ax1.scatter(colours0["F515 - F861"], colours0["F515 - F660"], c=sns.xkcd_rgb['cerulean'], alpha=0.7, marker ='o', s=100,  zorder=211.0, label='PN candidate')
#ax1.errorbar(colours0["F515 - F861"], colours0["F515 - F660"], xerr=colours0["e(F515 - F861)"], yerr=colours0["e(F515 - F660)"], marker='.', fmt='.', color= sns.xkcd_rgb["black"], elinewidth=0.9, markeredgewidth=0.9, capsize=3)

# Region where are located the PNe
result = findIntersection(2.7, 2.15, 0.0, 0.22058956, 0.0)
result_y = 2.7*result + 2.15

x_new = np.linspace(result, 15.5, 200)
x_new2 = np.linspace(-10.0, result, 200)
x_new3 = np.linspace(-10.0, result, 200)
y = 2.7*x_new + 2.15
yy = 0.0*x_new2 + 0.22058956

ax1.plot(x_new, y, color='k', linestyle='-.')
ax1.plot(x_new2, yy , color='k', linestyle='-.')

# Region of the simbiotic stars
result1 = findIntersection(5.5, -6.45, 0.98, -0.16, 0.0)
x_new_s = np.linspace(result1, 15.5, 200)
x_new2_s = np.linspace(result1, 15.5, 200)
y_s = 5.5*x_new_s - 6.45
yy_s = 0.98*x_new2_s - 0.16

ax1.plot(x_new_s, y_s, color='r', linestyle='--')
ax1.plot(x_new2_s, yy_s , color='r', linestyle='--')

# source_label(ax1, "", x1_np_MAG_APER_6_0_0, y1_np_MAG_APER_6_0_0, dx=-45)
# source_label(ax1, "LEDA 2790884", x1_np_MAG_APER_6_0_3, y1_np_MAG_APER_6_0_3, dx=8)
# source_label(ax1, "LEDA 101538", x1_np_MAG_APER_6_0_1, y1_np_MAG_APER_6_0_1, dx=-72)
# source_label(ax1, "PN Sp 4-1", x1_np_MAG_APER_6_0_2, y1_np_MAG_APER_6_0_2, dx=-50)
# source_label_hash(ax1, "TK 1", x1_np_hast_MAG_APER_6_0, y1_np_hast_MAG_APER_6_0, 6034, dx=4, dy=-10)
# source_label_hash(ax1, "Kn J1857.7+3931", x1_np_hast_MAG_APER_6_0, y1_np_hast_MAG_APER_6_0, 3014, dx=-50, dy=13)
# source_label_hash(ax1, "KnPa J1848.6+4151", x1_np_hast_MAG_APER_6_0, y1_np_hast_MAG_APER_6_0, 45492, dy=10)
# source_label_hash(ax1, "Jacoby 1", x1_np_hast_MAG_APER_6_0, y1_np_hast_MAG_APER_6_0, 5598, dx=-42, dy=6)
# source_label_hash_s(ax1, "Fr 2-21", x1_np_hast_ISO_GAUSS_s, y1_np_hast_ISO_GAUSS_s, dx=-36, dy=-7)

plt.text(0.05, 0.91, 'hPN zone',
         transform=ax1.transAxes, fontsize=22)
# plt.text(0.56, 0.91, 'SySt Zone',
#          transform=ax1.transAxes, color="red", fontsize=22)
# ax1.minorticks_on()

ax1.minorticks_on()
#ax1.grid(which='minor')#, lw=0.3)
#ax1.legend(scatterpoints=1, ncol=2, fontsize=12.3, loc="lower right", **lgd_kws)
#ax1.grid()
plt.tight_layout()
pltfile = 'Fig2-IDR2-SPLUS-J0515_J0660.pdf'
#save_path = '../../../../../Dropbox/JPAS/paper-phot/'
#file_save = os.path.join(save_path, pltfile)
plt.savefig(pltfile)

plt.clf()
###########################################################
#############################################################
'''
z - g vs z - J0660
'''
lgd_kws = {'frameon': True, 'fancybox': True, 'shadow': True}
sns.set_style('ticks')       
fig = plt.figure(figsize=(7, 6))
ax2 = fig.add_subplot(111)
ax2.set_xlim(left=-5.9,right=3.9)
ax2.set_ylim(bottom=-5.,top=5.0)
plt.tick_params(axis='x', labelsize=25)
plt.tick_params(axis='y', labelsize=25)
plt.xlabel('$z - g$', size =35)
plt.ylabel('$z - J0660$', size =35)
ax2.scatter(colours0["z - g"], colours0["z - F660"], c=sns.xkcd_rgb['cerulean'], alpha=0.7, marker ='o', s=100,  zorder=211.0, label='PN candidate')
#ax2.errorbar(colours0["z - g"], colours0["z - F660"], xerr=colours0["e(z - g)"], yerr=colours0["e(z - F660)"], marker='.', fmt='.', color= sns.xkcd_rgb["black"], elinewidth=0.9, markeredgewidth=0.9, capsize=3)

result = findIntersection(0.35, 0.82, -0.8, 1.8, 0.0)
result_y = 0.2319*result + 0.85

x_new = np.linspace(result, 15.5, 200)
x_new2 = np.linspace(-10.0, result, 200)

y = 0.35*x_new + 0.82
yy = -0.8*x_new2 +  1.8
#Mask
#mask = y >= result_y - 0.5
ax2.plot(x_new, y, color='k', linestyle='-.')
ax2.plot(x_new2, yy , color='k', linestyle='-.')

# Region of the simbiotic stars=>
result1 = findIntersection(-1.96, -3.15, 0.2, 0.44, 0.0)
x_new_s = np.linspace(-15.5, result1, 200)
x_new2_s = np.linspace(-15.5, result1, 200)
y_s = -1.96*x_new_s - 3.15
yy_s = 0.2*x_new2_s + 0.44
# ax2.plot(x_new_s, y_s, color='r', linestyle='--')
# ax2.plot(x_new2_s, yy_s , color='r', linestyle='--')

# source_label(ax2, "", x2_np_MAG_APER_6_0_0, y2_np_MAG_APER_6_0_0, dx=-42)
# source_label(ax2, "LEDA 2790884", x2_np_MAG_APER_6_0_3, y2_np_MAG_APER_6_0_3, dx=-75, dy=7)
# source_label(ax2, "LEDA 101538", x2_np_MAG_APER_6_0_1, y2_np_MAG_APER_6_0_1, dy=-8)
# source_label(ax2, "PN Sp 4-1", x2_np_MAG_APER_6_0_2, y2_np_MAG_APER_6_0_2, dx=7, dy=-5)
# source_label_hash(ax2, "TK 1", x2_np_hast_MAG_APER_6_0, y2_np_hast_MAG_APER_6_0, 6034)
# source_label_hash(ax2, "Kn J1857.7+3931", x2_np_hast_MAG_APER_6_0, y2_np_hast_MAG_APER_6_0, 3014, dx=-85, dy=-5)#, dx=-85, dy=5)
# source_label_hash(ax2, "KnPa J1848.6+4151", x2_np_hast_MAG_APER_6_0, y2_np_hast_MAG_APER_6_0, 45492, dy=-10)
# source_label_hash(ax2, "Jacoby 1", x2_np_hast_MAG_APER_6_0, y2_np_hast_MAG_APER_6_0, 5598, dx=4, dy=-10)#, dx=-45, dy=-5)
# source_label_hash_s(ax2, "Fr 2-21", x2_np_hast_ISO_GAUSS_s, y2_np_hast_ISO_GAUSS_s, dx=-36, dy=7) 

plt.text(0.58, 0.92, 'hPN zone',
         transform=ax2.transAxes, fontsize=22)
# plt.text(0.03, 0.7, 'SySt Zone',
#          transform=ax2.transAxes, color="red", fontsize=22)
# ax2.minorticks_on()

ax2.minorticks_on()
#ax1.grid(which='minor')#, lw=0.3)
#ax2.legend(scatterpoints=1, ncol=2, fontsize=12.3, loc="lower right", **lgd_kws)
#ax2.grid()
#sns.despine(bottom=True)
plt.tight_layout()
plt.tight_layout()
pltfile = 'Fig3-IDR2-SPLUS-z.pdf'
#file_save = os.path.join(save_path, pltfile)
plt.savefig(pltfile)
plt.clf()
###############################################################
###############################################################
'''
J0660 - r vs g - J0515
'''
lgd_kws = {'frameon': True, 'fancybox': True, 'shadow': True}
sns.set_style('ticks')       
fig = plt.figure(figsize=(7, 6))
ax4 = fig.add_subplot(111)
ax4.set_xlim(left=-2.7,right=0.8)
ax4.set_ylim(bottom=-3.2,top=1.8)
plt.tick_params(axis='x', labelsize=25)
plt.tick_params(axis='y', labelsize=25)
plt.xlabel('$J0660 - r$', size =35)
plt.ylabel('$g - J0515$', size =35)
ax4.scatter(colours0["F660 - r"], colours0["g - F515"], c=sns.xkcd_rgb['cerulean'], alpha=0.7, marker ='o', s=100,  zorder=211.0, label='PN candidate')
#ax4.errorbar(colours0["F660 - r"], colours0["g - F515"], xerr=colours0["e(F660 - r)"], yerr=colours0["e(g - F515)"], marker='.', fmt='.', color= sns.xkcd_rgb["black"], elinewidth=0.9, markeredgewidth=0.9, capsize=3)

# Region where are located the PNe
result = findIntersection(0.12, -0.01, -1.1, -1.07, 0.0)
result_y = 0.12*result - 0.01

x_new = np.linspace(-15.5, result,  200)
x_new2 = np.linspace(result, 10.0, 200)
x_new3 = np.linspace(-10.0, 1.1, 200)
y = 0.12*x_new - 0.01
yy = -1.1*x_new2 - 1.07
#Mask
#mask = y >= result_y - 0.5
ax4.plot(x_new, y, color='k', linestyle='-.')
ax4.plot(x_new2, yy , color='k', linestyle='-.')

# Region of the simbiotic stars
result1 = findIntersection(-0.19, -0.05, -2.66, -2.2, 0.0)
x_new_s = np.linspace(-15.5, result1, 200)
x_new2_s = np.linspace(-15.0, result1, 200)
y_s = -0.19*x_new_s - 0.09
yy_s = -2.66*x_new2_s - 2.2

plt.text(0.05, 0.07, 'hPN zone',
         transform=ax4.transAxes, fontsize=22)
plt.text(0.05, 0.92, 'SySt Zone',
         transform=ax4.transAxes, color="red", fontsize=22)
# ax4.minorticks_on()

ax4.minorticks_on()
#ax1.grid(which='minor')#, lw=0.3)
#ax4.legend(scatterpoints=1, fontsize=15.0, loc="lower right", **lgd_kws)
#ax4.grid()
#sns.despine(bottom=True)
plt.tight_layout()
pltfile = 'Fig4-IDR2-SPLUS-g.pdf'
#file_save = os.path.join(save_path, pltfile)
plt.savefig(pltfile)
plt.clf()

####################################################################################
####################################################################################
'''
g - i vs J0410 - J0660
'''
lgd_kws = {'frameon': True, 'fancybox': True, 'shadow': True}
sns.set_style('ticks')       
fig = plt.figure(figsize=(7, 6))
ax5 = fig.add_subplot(111)
ax5.set_xlim(left=-3.0,right=5.0)
ax5.set_ylim(bottom=-2.0,top=6.0)

plt.tick_params(axis='x', labelsize=25)
plt.tick_params(axis='y', labelsize=25)
plt.xlabel('$g - i$', size=35)
plt.ylabel('$J0410 - J0660$', size =35)
ax5.scatter(colours0["g - i"], colours0["F410 - F660"], c=sns.xkcd_rgb['cerulean'], alpha=0.7, s=100,  zorder=211.0, label='PN candidate')
#ax5.errorbar(colours0["g - i"], colours0["F410 - F660"], xerr=colours0["e(g - i)"], yerr=colours0["e(F410 - F660)"],  marker='.', fmt='.', color= sns.xkcd_rgb["light orange"], elinewidth=0.9, markeredgewidth=0.9, alpha=0.3, capsize=3)

# Region where are located the PNe
result = findIntersection(8.0, 4.50, 0.8, 0.55, 0.0)
result_y = 8.0*result + 4.50

x_new = np.linspace(result, 15.5, 200)
x_new2 = np.linspace(-10.0, result, 200)
x_new3 = np.linspace(-10.0, 1.1, 200)
y =  8.0*x_new + 4.50
yy = 0.8*x_new2 + 0.55
#Mask
#mask = y >= result_y - 0.5
ax5.plot(x_new, y, color='k', linestyle='-.')
ax5.plot(x_new2, yy , color='k', linestyle='-.')

# Region of the simbiotic stars
result1 = findIntersection(-5.2, +10.60, 2.13, -1.43, 0.0)
x_new_s = np.linspace(-15.5, result1, 200)
x_new2_s = np.linspace(result1, 15.5, 200)
y_s = -5.2*x_new_s + 10.60
yy_s = 2.13*x_new2_s - 1.43

ax5.plot(x_new_s, y_s, color='r', linestyle='--')
ax5.plot(x_new2_s, yy_s , color='r', linestyle='--')

# source_label(ax5, "", x5_np_MAG_APER_6_0_0, y5_np_MAG_APER_6_0_0, dy=-4.5)
# source_label(ax5, "LEDA 2790884", x5_np_MAG_APER_6_0_3, y5_np_MAG_APER_6_0_3, dx=10, dy=-4.5)
# source_label(ax5, "LEDA 101538", x5_np_MAG_APER_6_0_1, y5_np_MAG_APER_6_0_1, dx=-65, dy=-4.5)
# source_label(ax5, "PN Sp 4-1", x5_np_MAG_APER_6_0_2, y5_np_MAG_APER_6_0_2, dx= -50, dy=-4.5)
# source_label_hash(ax5, "TK 1", x5_np_hast_MAG_APER_6_0, y5_np_hast_MAG_APER_6_0, 6034, dy=-5)
# source_label_hash(ax5, "Kn J1857.7+3931", x5_np_hast_MAG_APER_6_0, y5_np_hast_MAG_APER_6_0, 3014)#, dx=-85)
# source_label_hash(ax5, "KnPa J1848.6+4151", x5_np_hast_MAG_APER_6_0, y5_np_hast_MAG_APER_6_0, 45492, dy=10)
# source_label_hash(ax5, "Jacoby 1", x5_np_hast_MAG_APER_6_0, y5_np_hast_MAG_APER_6_0, 5598, dx=-46, dy=-5)
# source_label_hash_s(ax5, "Fr 2-21", x5_np_hast_ISO_GAUSS_s, y5_np_hast_ISO_GAUSS_s, dx=-36, dy=8)

plt.text(0.03, 0.90, 'hPN zone',
         transform=ax5.transAxes, fontsize=22)

# plt.text(0.5, 0.93, 'SySt Zone',
#          transform=ax5.transAxes,color="red", fontsize=22)

ax5.minorticks_on()
#ax1.grid(which='minor')#, lw=0.3)
#ax5.legend(scatterpoints=1, fontsize=15.0, loc='lower right', **lgd_kws)
#ax5.grid()
#sns.despine(bottom=True)
plt.tight_layout()
plt.tight_layout()
pltfile = 'Fig5-IDR2-SPLUS-gi.pdf'
#file_save = os.path.join(save_path, pltfile)
plt.savefig(pltfile)

#+END_SRC
   
For this the file must be pne-smc-splus-match-2007.fits

 + I made the S-spectrum for all the objects. I also wrote the a new program based on the other to display the spectrum:

                             : python ../new-programs/photo-spectra-SPLUSDR2-v2.py pne-smc-splus-match-2007 --debug  

#+BEGIN_SRC python :eval no :photo-spectra-SPLUSDR2-v2.py

'''
Make photo-spectra from observed SPLUS objects. This program is an updated version of the program: photo-spectra-SPLUSDR2.py.
I madified this one to work with SPLUS SMC catalog
'''
from __future__ import print_function
import numpy as np
import glob
import json
import matplotlib.pyplot as plt
from astropy.table import Table
#import seaborn as sns
import sys
import argparse
import os
from colour import Color

Number = []

wl = [3485, 3785, 3950, 4100, 4300, 4803, 5150, 6250, 6600, 7660, 8610, 9110]
color = ["#CC00FF", "#9900FF", "#6600FF", "#0000FF", "#009999", "#006600", "#DD8000", "#FF0000", "#CC0066", "#990033", "#660033", "#330034"]
marker = ["s", "o", "o", "o", "o", "s", "o", "s", "o", "s", "o", "s"] ### tienen todos los filtros

# wl1 = [3785, 3950, 4100, 4300, 4803, 5150, 6250, 6600, 7660, 8610, 9110]
# color1 = [ "#9900FF", "#6600FF", "#0000FF", "#009999", "#006600", "#DD8000", "#FF0000", "#CC0066", "#990033", "#660033", "#330034"]
# marker1 = [ "o", "o", "o", "o", "s", "o", "s", "o", "s", "o", "s"] # No tiene el primer filtro


parser = argparse.ArgumentParser(
    description="""Write wave and magnitude of a spectrum""")

parser.add_argument("source", type=str,
                    default="known-PN-jplus-idr",
                    help="Name of source, taken the prefix ")

parser.add_argument("--debug", action="store_true",
                    help="Print out verbose debugging info about each line in region file")

args = parser.parse_args()
file_ = args.source + ".dat"


data = Table.read(file_, format="ascii")
n = data["RA"]

Number = []
mag_auto  = [[] for _ in range(len(n))]
mag_petro = [[] for _ in range(len(n))]
mag_aper = [[] for _ in range(len(n))]

#Error
mag_auto_err  = [[] for _ in range(len(n))]
mag_petro_err  = [[] for _ in range(len(n))]
mag_aper_err  = [[] for _ in range(len(n))]

print(len(n))
#sys.exit()

for i in range(len(n)):
    mag_aper[i].append(data["U_aper_3"][i]) #aper
    mag_aper[i].append(data["F378_aper_3"][i])
    mag_aper[i].append(data["F395_aper_3"][i])
    mag_aper[i].append(data["F410_aper_3"][i])
    mag_aper[i].append(data["F430_aper_3"][i])
    mag_aper[i].append(data["G_aper_3"][i])
    mag_aper[i].append(data["F515_aper_3"][i]) 
    mag_aper[i].append(data["R_aper_3"][i]) 
    mag_aper[i].append(data["F660_aper_3"][i])
    mag_aper[i].append(data["I_aper_3"][i]) 
    mag_aper[i].append(data["F861_aper_3"][i]) 
    mag_aper[i].append(data["Z_aper_3"][i])
    #Petro
    mag_auto[i].append(data["U_auto"][i]) #auto
    mag_auto[i].append(data["F378_auto"][i])
    mag_auto[i].append(data["F395_auto"][i])
    mag_auto[i].append(data["F410_auto"][i])
    mag_auto[i].append(data["F430_auto"][i])
    mag_auto[i].append(data["G_auto"][i])
    mag_auto[i].append(data["F515_auto"][i]) 
    mag_auto[i].append(data["R_auto"][i]) 
    mag_auto[i].append(data["F660_auto"][i])
    mag_auto[i].append(data["I_auto"][i]) 
    mag_auto[i].append(data["F861_auto"][i]) 
    mag_auto[i].append(data["Z_auto"][i])
    #Petro
    mag_petro[i].append(data["U_petro"][i])
    mag_petro[i].append(data["F378_petro"][i])
    mag_petro[i].append(data["F395_petro"][i])
    mag_petro[i].append(data["F410_petro"][i])
    mag_petro[i].append(data["F430_petro"][i])
    mag_petro[i].append(data["G_petro"][i])
    mag_petro[i].append(data["F515_petro"][i]) 
    mag_petro[i].append(data["R_petro"][i]) 
    mag_petro[i].append(data["F660_petro"][i])
    mag_petro[i].append(data["I_petro"][i]) 
    mag_petro[i].append(data["F861_petro"][i]) 
    mag_petro[i].append(data["Z_petro"][i])

    #ERRO Aper
    mag_aper_err[i].append(float(data["e_U_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_F378_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_F395_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_F410_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_F430_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_G_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_F515_aper_3"][i])) 
    mag_aper_err[i].append(float(data["e_R_aper_3"][i])) 
    mag_aper_err[i].append(float(data["e_F660_aper_3"][i])) 
    mag_aper_err[i].append(float(data["e_I_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_F861_aper_3"][i]))
    mag_aper_err[i].append(float(data["e_Z_aper_3"][i]))
   
    #ERRO AUTO
    mag_auto_err[i].append(float(data["e_U_auto"][i]))
    mag_auto_err[i].append(float(data["e_F378_auto"][i]))
    mag_auto_err[i].append(float(data["e_F395_auto"][i]))
    mag_auto_err[i].append(float(data["e_F410_auto"][i]))
    mag_auto_err[i].append(float(data["e_F430_auto"][i]))
    mag_auto_err[i].append(float(data["e_G_auto"][i]))
    mag_auto_err[i].append(float(data["e_F515_auto"][i])) 
    mag_auto_err[i].append(float(data["e_R_auto"][i])) 
    mag_auto_err[i].append(float(data["e_F660_auto"][i]))
    mag_auto_err[i].append(float(data["e_I_auto"][i]))
    mag_auto_err[i].append(float(data["e_F861_auto"][i]))
    mag_auto_err[i].append(float(data["e_Z_auto"][i]))

    #ERRO petro
    mag_petro_err[i].append(data["e_U_petro"][i])
    mag_petro_err[i].append(data["e_F378_petro"][i])
    mag_petro_err[i].append(data["e_F395_petro"][i])
    mag_petro_err[i].append(data["e_F410_petro"][i])
    mag_petro_err[i].append(data["e_F430_petro"][i])
    mag_petro_err[i].append(data["e_G_petro"][i])
    mag_petro_err[i].append(data["e_F515_petro"][i]) 
    mag_petro_err[i].append(data["e_R_petro"][i]) 
    mag_petro_err[i].append(data["e_F660_petro"][i])
    mag_petro_err[i].append(data["e_I_petro"][i]) 
    mag_petro_err[i].append(data["e_F861_petro"][i]) 
    mag_petro_err[i].append(data["e_Z_petro"][i])

    font = {'family': 'serif',
        'color':  'black',
        'weight': 'normal',
        'size': 16,
        }
    ##########################################################################################
    # Plotting -- Aper  ######################################################################
    ##########################################################################################
    plotfile = "photopectrum_splus_"+str(data["ID"][i].split("S.")[-1].split(".g")[0]).replace(".", "-")+"_aper.pdf"
    fig = plt.figure(figsize=(15.5, 9.5))
    ax = fig.add_subplot(1,1,1)
    plt.tick_params(axis='x', labelsize=42) 
    plt.tick_params(axis='y', labelsize=42)
    ax.set_xlim(left=3000, right=9700)
    #ax.set_ylim(ymin=17.5,ymax=23)
    #ax1.set_xlabel(r'$\lambda$')
    ax.set_xlabel(r'Wavelength $[\mathrm{\AA]}$', fontsize = 44)
    ax.set_ylabel(r'Magnitude [AB]', fontsize = 44)
    ax.plot(wl, mag_aper[i], '-k', alpha=0.2)#, label='Auto')
    for wl1, mag, mag_err, colors, marker_ in zip(wl, mag_aper[i], mag_aper_err[i], color, marker):
        ax.scatter(wl1, mag, color = colors, marker=marker_, s=600, zorder=10)
        ax.errorbar(wl1, mag, yerr=mag_err, marker='.', fmt='.', color=colors, ecolor=colors, elinewidth=5.9, markeredgewidth=5.2,  capsize=20)
    # plt.text(0.06, 0.1, "Fr 2-21",
    #          transform=ax.transAxes, fontsize=48,  fontdict=font)
    #plt.subplots_adjust(bottom=0.19)
    plt.legend(fontsize=20.0)
    plt.tight_layout()
    plt.gca().invert_yaxis()
    #save_path = '../../../Dropbox/JPAS/paper-phot/'
    #file_save = os.path.join(save_path, plotfile)
    plt.savefig(plotfile)
    plt.clf()
    ##########################################################################################
    # Plotting -- Auto  ######################################################################
    ##########################################################################################
    plotfile = "photopectrum_splus_"+str(data["ID"][i].split("S.")[-1].split(".g")[0]).replace(".", "-")+"_auto.pdf"
    fig = plt.figure(figsize=(15.5, 9.5))
    ax = fig.add_subplot(1,1,1)
    plt.tick_params(axis='x', labelsize=42) 
    plt.tick_params(axis='y', labelsize=42)
    ax.set_xlim(left=3000, right=9700)
    #ax.set_ylim(ymin=17.5,ymax=23)
    #ax1.set_xlabel(r'$\lambda$')
    ax.set_xlabel(r'Wavelength $[\mathrm{\AA]}$', fontsize = 44)
    ax.set_ylabel(r'Magnitude [AB]', fontsize = 44)
    ax.plot(wl, mag_auto[i], '-k', alpha=0.2)#, label='Auto')
    for wl1, mag, mag_err, colors, marker_ in zip(wl, mag_auto[i], mag_auto_err[i], color, marker):
        ax.scatter(wl1, mag, color = colors, marker=marker_, s=600, zorder=10)
        ax.errorbar(wl1, mag, yerr=mag_err, marker='.', fmt='.', color=colors, ecolor=colors, elinewidth=5.9, markeredgewidth=5.2,  capsize=20)
    # plt.text(0.06, 0.1, "Fr 2-21",
    #          transform=ax.transAxes, fontsize=48,  fontdict=font)
    #plt.subplots_adjust(bottom=0.19)
    plt.legend(fontsize=20.0)
    plt.tight_layout()
    plt.gca().invert_yaxis()
    #save_path = '../../../Dropbox/JPAS/paper-phot/'
    #file_save = os.path.join(save_path, plotfile)
    plt.savefig(plotfile)
    plt.clf()
    ##########################################################################################
    #PETRO####################################################################################
    ##########################################################################################
    plotfile = "photopectrum_splus_"+str(data["ID"][i].split("S.")[-1].split(".g")[0]).replace(".", "-")+"_petro.pdf"
    fig = plt.figure(figsize=(15.5, 9.5))
    ax1 = fig.add_subplot(1,1,1)
    plt.tick_params(axis='x', labelsize=42) 
    plt.tick_params(axis='y', labelsize=42)
    ax1.set_xlim(left=3000, right=9700)
    #ax.set_ylim(ymin=17.5,ymax=23)
    #ax1.set_xlabel(r'$\lambda$')
    ax1.set_xlabel(r'Wavelength $[\mathrm{\AA]}$', fontsize = 44)
    ax1.set_ylabel(r'Magnitude [AB]', fontsize = 44)
    ax1.plot(wl, mag_petro[i], '-k', alpha=0.2)#, label='Auto')
    for wl1, mag_1, mag_err_1, colors, marker_ in zip(wl, mag_petro[i], mag_petro_err[i], color, marker):
        ax1.scatter(wl1, mag_1, color = colors, marker=marker_, s=600, zorder=10)
        ax1.errorbar(wl1, mag_1, yerr=mag_err_1, marker='.', fmt='.', color=colors, ecolor=colors, elinewidth=5.9, markeredgewidth=5.2,  capsize=20)
    # plt.text(0.06, 0.1, "Fr 2-21",
    #          transform=ax.transAxes, fontsize=48,  fontdict=font)
    #plt.subplots_adjust(bottom=0.19)
    plt.legend(fontsize=20.0)
    plt.tight_layout()
    plt.gca().invert_yaxis()
    #save_path = '../../../Dropbox/JPAS/paper-phot/'
    #file_save = os.path.join(save_path, plotfile)
    plt.savefig(plotfile)
    plt.clf()


#+END_SRC    
   For this the file must be pne-smc-splus-match-2007.dat
 
 + All is resumed in the file pne-smc-splus.tex.
     - For that I wrote a program to made the table with the figures (photos-pectrum) in Latex format: 

                     : python ../varios-programas/latex-figs.py

#+BEGIN_SRC python :eval no :tangle latex-figs.py     

'''
Create file.tex with several figures
'''
from __future__ import print_function
import numpy as np
from astropy.io import fits
import os
import glob
import json
import matplotlib.pyplot as plt
import pandas as pd
#import StringIO
from astropy.table import Table
import seaborn as sns
import sys
from scipy.optimize import fsolve
import colours

#Read de files
pattern = "*aper.pdf"
file_list = glob.glob(pattern)

pattern1 = "*auto.pdf"
file_list1 = glob.glob(pattern1)

pattern2 = "*petro.pdf"
file_list2 = glob.glob(pattern2)

latex_columns = ['Aper_3', 'Auto', 'Petro']
    
#print('\n'.join(map(lambda x: 'Test{0:04}'.format(x), range(0, 10000))))

ap3, apa, app = [], [], []
for a, b, c in zip(file_list, file_list1, file_list2):
    ap3.append("\includegraphics[width=0.3\linewidth, clip]{"+a+"}")
    apa.append("\includegraphics[width=0.3\linewidth, clip]{"+b+"}")
    app.append("\includegraphics[width=0.3\linewidth, clip]{"+c+"}")

ap3.sort()
apa.sort()
app.sort()
table_fig = Table([ap3, apa, app],  names=('Aper_3', 'Auto', 'Petro'), meta={'name': 'first table'})
    #table_fig.sort('Auto')
table_fig.write('table-figs.tex', format = "ascii.latex", overwrite=True) 
 
#+END_SRC
  
 + I now included the RGB images of the objects. I made one pair of the objects: One combining the F515, F660 and F861 and the second one by 
   combining the filters G, R and I.

**** More information about the SMC PNe

Seems there is a discrepancy betwween the HST and SPLUS. Splus presents the PNe resolved. The literature 
says that this object must appers as point sources. 

The prof. prepared a document with the HST counterpart of these PNe. She says that the size of the PNe 
in SPLUS no correspond with the SPLUS. According to the paper (Shaw, Stanghellini, Villaver & Mutchler, 2006 (2006ApJS..167..201S))
these PNe have angular dimensions between 0.31" x 0.31"(R, round) e 0.59" x 0.48".

A import detail about the paper cited in below document. "The nebular diameters, given in column (5), were measured with respect to the 10\% intensity contour of the outermost structure and are useful for conducting follow-on observations of the PNe." And the paper (\url{2003ApJ...596..997S}) used the same method to measured the size. "the nebular dimensions, measured from the 10\% brightness contour".

I really don't understand the technique that the used to computed these sizes.
 
*** Known compact HII regions
I found a catalog of compact H II regions (2012SerAJ.185...53W). This sample has 51 compact H II regions of which 12 are in the SMC SPLUS
   catalog. The file compat-HIIRegions-smc-match-splus.dat.

[X] Put in the color-color diagrams. 
    : python ../varios-programas/color-diagrams-splusdr2_automatic-v3.py pne-smc-splus-match-2007 compat-HIIRegions-smc-match-splus
[X] S-spectrum.

[X] RGB images. Some is not possible to do the images. I will fix that.

*** Making the images of the objects.

+ I converted the .fz to .fits using the command line:

: for D in ./MC*; do if [ -d “$D” ]; then cd “$D”; for f in *.fz; do python ../varios-programas/convert-fz-fits.py ${f%.fz}; done; cd ..; fi; done

#+BEGIN_SRC python: convert fz to fits

'''
Based on the progam of Gabriel.
Original vrsion: covert.py
'''
from astropy.io import fits, ascii
import os
import argparse

def fz2fits(image):
    """
    It converts SPLUS images
    from .fz to .fits
    """
    datos = fits.open(image)[1].data
    heada = fits.open(image)[1].header
    imageout = image[:-2] + 'fits'
    print ('Creating file: ')
    print (imageout)
    fits.writeto(imageout, datos, heada, overwrite=True)

parser = argparse.ArgumentParser(
    description="""Convert file.fz to file.fits""")

parser.add_argument("fzfile", type=str,
                    default="MC0095_F378_swp",
                    help="Name of file, taken the prefix ")

cmd_args = parser.parse_args()
fzfile_ = cmd_args.fzfile + ".fz"
 
fz2fits(fzfile_)

#+END_SRC
+ I wrote the DS9 region for each PNe using ipython/Write DS9 region.
   I made some changes for this one I used the package catalog-utils-v2.py. I change box for circle, and I putted 6 arcsec of radii.

+ Cut the images centered in the object, I used the program; cut-images-fits.py.
  Consult Extended-pne-splus/blob/master/Description.org.

#+BEGIN_SRC python : cut images

'''
Cutting images fits
Based in pyFIST.py and extract-image.py from Henney program

'''
from __future__ import print_function
import numpy as np
import json
import os
from astropy.io import fits
from astropy import wcs
from astropy.wcs import WCS
from astropy import coordinates as coord
from astropy import units as u 
import argparse
import sys


parser = argparse.ArgumentParser(
    description="""Cut images from fits files""")

parser.add_argument("source", type=str,
                    default="1000001-JPLUS-02363-v2_J0660_swp",
                    help="Name of source (prefix for files) ")

parser.add_argument("--position", type=str,
                    default="HYDRA-0026-000010640-position",
                    help="Find the DS9 region")

parser.add_argument("--debug", action="store_true",
                    help="Print out verbose debugging info about each line in region file")

args = parser.parse_args()
regionfile = args.source + ".fits"

path1 = "../"
try:
    hdu = fits.open(os.path.join(path1, regionfile))
except FileNotFoundError:
    hdu = fits.open(regionfile)
    
crop_coords_unit=u.degree

position = args.position + ".reg"
ra, dec = [], []

f = open(position, 'r')
header1 = f.readline()
header2 = f.readline()
header3 = f.readline()
for line in f:
    line = line.strip()
    columns = line.split()
    coor = line.split("(")[-1].split("\"")[0]
    ra1, dec1 = coor.split(",")[0:2]
    crop_c = coord.SkyCoord(ra1, dec1, unit=(u.degree, u.degree))
    #locc = sys.argv[1:]
    # ra = input('Enter RA: ')
    # dec = input('Enter DEC: ')
    # ra = args.ra
    # dec = args.dec
    print(crop_c)
    w = wcs.WCS(hdu[0].header)
    print(w)
    #crop_coords = np.array(w.wcs_pix2world(hdu[0].data.shape[0]/2., 
				       #hdu[0].data.shape[1]/2., 0))
  
    #crop_c = coord.SkyCoord(crop_coords[0], crop_coords[1], unit=u.degree)

    #crop_radius=input('Enter Radius: ')
    crop_radius = 100*u.arcsec # es el que estoy usando cuando conozco la White Dwarf
    #crop_radius = 28.0*u.arcsec
    #crop_radius = 20.0*u.arcsec
    crop_radius = 5.0*u.arcsec
    pix_scale = 0.0996*u.arcsec
    
    crop_c_pix = w.wcs_world2pix(crop_c.ra.degree, crop_c.dec.degree, 0)
    crop_radius_pixels = crop_radius.to(u.arcsec) / pix_scale.to(u.arcsec)
   
    x1 = int(np.clip(crop_c_pix[0]-crop_radius_pixels, 0, hdu[0].data.shape[0]-1))
    x2 = int(np.clip(crop_c_pix[0]+crop_radius_pixels, 0, hdu[0].data.shape[0]-1))
    y1 = int(np.clip(crop_c_pix[1]-crop_radius_pixels, 0, hdu[0].data.shape[1]-1))
    y2 = int(np.clip(crop_c_pix[1]+crop_radius_pixels, 0, hdu[0].data.shape[1]-1))
    

    hdu[0].data = hdu[0].data[y1:y2, x1:x2]
    
    hdu[0].header['CRPIX1'] -= x1
    hdu[0].header['CRPIX2'] -= y1
    # hdu[0].header['CRVAL1'] = crop_c.ra.degree
    # hdu[0].header['CRVAL2'] = crop_c.dec.degree
    w = WCS(hdu[0].header)
    
    #################### 
    #Save the new file##
    ####################
    outfile = regionfile.replace("_swp.fits", "_{}_swp-crop.fits".format(position.split("15-")[-1].split("-p")[0]))
    new_hdu = fits.PrimaryHDU(hdu[0].data, header=hdu[0].header)
    new_hdu.writeto(outfile, output_verify="fix", overwrite=True)

#+END_SRC

The only problem it is the program is no so autmatic I have to change manually " outfile = regionfile.replace("_swp.fits", "_{}_swp-crop.fits".format(position.split("15-")[-1].split("-p")[0]))"
Changing the term "split("15-")[-1]". I have to fix that.

+ I modified the rgb-image.py (now rgb_image-v2.py) to make the RGB images to work with these data. To run the programa just executing the comand:

: python ../../varios-programas/rgb_image-v2.py MC0072_F861_044863_swp-crop MC0072_F660_044863_swp-crop MC0072_F515_044863_swp-crop --vmin_r -0.1 --vmax_r 5 --vmin_g -0.01 --vmax_g 3.0 --vmin_b -0.1 --vmax_b 20 --debug 

#+BEGIN_SRC python: rgb_image-v2.py

'''
Making RGB images from PLUS .fits
Based on original: rgb_image.py
Autor: L. A. Gutiérrez Soto
02/09/20
'''

from __future__ import print_function
import aplpy
import numpy
import sys
from astropy import coordinates as coord
from astropy import units as u
from astropy.coordinates import SkyCoord
import argparse
import matplotlib.pyplot as plt
from astropy.io import fits
import matplotlib
matplotlib.use("Agg")

parser = argparse.ArgumentParser(
    description="""Plot side-by-side RGB images of sources""")

parser.add_argument("image_r", type=str,
                    default="1000001-JPLUS-01485-v2_iSDSS_swp-crop",
                    help="Name of original FITS image (section in database) in i")

parser.add_argument("image_g", type=str,
                    default="1000001-JPLUS-01485-v2_rSDSS_swp-crop",
                    help="Name of original FITS image (section in database) in r")

parser.add_argument("image_b", type=str,
                    default="1000001-JPLUS-01485-v2_gSDSS_swp-crop",
                    help="Name of original FITS image (section in database) in g")

# parser.add_argument("--name", type=str,
#                     default="PSP",
#                     help="Name of the objet")

parser.add_argument("--vmin_r", type=float, default=None,
                    help="""Set minimum brightness directly - overrides minfactor - r""")
parser.add_argument("--vmax_r", type=float, default=None,
                    help="""Set maximum brightness directly - overrides maxfactor - r""")

parser.add_argument("--vmin_g", type=float, default=None,
                    help="""Set minimum brightness directly - overrides minfactor - g""")
parser.add_argument("--vmax_g", type=float, default=None,
                    help="""Set maximum brightness directly - overrides maxfactor - g""")

parser.add_argument("--vmin_b", type=float, default=None,
                    help="""Set minimum brightness directly - overrides minfactor - b""")
parser.add_argument("--vmax_b", type=float, default=None,
                    help="""Set maximum brightness directly - overrides maxfactor - b""")

# parser.add_argument("--zoom", type=float, default=None,
#                     help="""\
#                    Zoom factor to adjust size of plot box - values > 1.0 mean to zoom in""")

parser.add_argument("--position", type=str,
                    default="HYDRA-0026-000010640-position",
                    help="Find the DS9 region")

parser.add_argument("--debug", action="store_true",
                    help="Print out verbose debugging info")


cmd_args = parser.parse_args()
image_r = cmd_args.image_r + ".fits"
image_g = cmd_args.image_g + ".fits"
image_b = cmd_args.image_b + ".fits"

hdul_r = fits.open(image_r)
instrument_r = hdul_r[0].header['FILTER']
hdul_g = fits.open(image_g)
instrument_g = hdul_g[0].header['FILTER']
hdul_b = fits.open(image_b)
instrument_b = hdul_b[0].header['FILTER']

#aplpy.make_rgb_cube(['1000001-JPLUS-01485-v2_iSDSS_swp-crop.fits', '1000001-JPLUS-01485-v2_rSDSS_swp-crop.fits',
                     #'1000001-JPLUS-01485-v2_gSDSS_swp-crop.fits'], 'JPLUS_cube.fits')

aplpy.make_rgb_cube([image_r, image_g, image_b], image_r.replace('_swp-crop.fits', '_cube.fits'))

aplpy.make_rgb_image(image_r.replace('_swp-crop.fits', '_cube.fits'),
                              image_r.replace('_swp-crop.fits', '_rgb.png'),
                      vmin_r=cmd_args.vmin_r, vmax_r=cmd_args.vmax_r, vmin_g=cmd_args.vmin_g,
                                                      vmax_g=cmd_args.vmax_g, vmin_b=cmd_args.vmin_b, vmax_b=cmd_args.vmax_b)

#aplpy.make_rgb_image('JPLUS_cube.fits','JPLUS_linear.png')
#hdul = fits.open('JPLUS_cube_2d.fits')
# aplpy.make_rgb_image('JPLUS_cube.fits','JPLUS_rgb.png',
#                       stretch_r='arcsinh', stretch_g='arcsinh',
#                       stretch_b='arcsinh')


# With the mask regions, the file may not exist
position = cmd_args.position + ".reg"
ra, dec = [], []

try:
    f = open(position, 'r')
    header1 = f.readline()
    header2 = f.readline()
    header3 = f.readline()
    for line in f:
        line = line.strip()
        columns = line.split()
        coor = line.split("(")[-1].split("\"")[0]
        ra1, dec1 = coor.split(",")[0:2]
        c = SkyCoord(ra1, dec1, unit=(u.hourangle, u.deg))
        ra.append(c.ra.degree)
        dec.append(c.dec.degree)

except FileNotFoundError:
    print("File", position,
                "not found - is not necesary now")
    
# Launch APLpy figure of 2D cube
img = aplpy.FITSFigure(image_r.replace('_swp-crop.fits', '_cube_2d.fits')) 
img.show_rgb(image_r.replace('_swp-crop.fits', '_rgb.png'))

# Maybe we would like the arcsinh stretched image more?
#img.show_rgb('ic348_color_arcsinh.png')

# Modify the tick labels for precision and format
# img.tick_labels.set_xformat('hh:mm:ss')
# img.tick_labels.set_yformat('dd:mm')
img.axis_labels.set_xtext('RA (J2000)')
#img.axis_labels.hide_x()
img.axis_labels.set_ytext('Dec (J2000)')
img.axis_labels.set_font(size=18, weight='medium', stretch='normal', family='sans-serif', style='normal', variant='normal')
#img.axis_labels.hide()
#img.axis_labels.hide_y()

img.tick_labels.set_font(size=18, weight='medium', stretch='normal', family='sans-serif', style='normal', variant='normal')
#img.axis_labels.set_yposition('right')
#img.tick_labels.set_yposition('right')
#img.tick_labels.hide()
#img.tick_labels.hide_x()  # Hide the x axis
#img.tick_labels.hide_y()  # Hide the y axis
# Let's add a scalebar to it
img.add_scalebar(20.0/3600.)
img.scalebar.set_label('20"')
img.scalebar.set(color='white', linewidth=4, alpha=0.9)
img.scalebar.set_font(size=45, weight='bold',
                      stretch='normal', family='sans-serif',
                      style='normal', variant='normal')

#Filter names
img.add_label(0.1, 0.9, instrument_b + "+" + instrument_g + "+" + instrument_r, color="white",
              horizontalalignment='left',
              weight='bold', size=20, relative=True, zorder=1000)
dx, dy = 0.001, -0.001
# img.add_label(0.1+dx, 0.9+dy, instrument_b, color="black", alpha=0.6,
#               horizontalalignment='left',
#               bbox={"facecolor": "black", "edgecolor": "none",# "pad": 20,
#                     "alpha": 0.5, "boxstyle": "round, pad=0.5"},
#               weight='bold', size=55, relative=True, zorder=999)

img.show_regions(position)
# except FileNotFoundError:
#     print("File", position,
#                 "not found - is not necesary now")

# img.show_markers(ra, dec, layer='marker_set_1', edgecolor='red',
#                  facecolor='red', marker='o', s=10, alpha=1.)
#img.show_markers(ra, dec , layer="marker_set_1", edgecolor="red", facecolor="none", marker="o", s=10,  alpha=0.5)
#img.recenter(ra, dec, radius=cmd_args.zoom/3600.) #zoom ax2.recenter(ra0, dec0, 4*R0/cmd_args.zoom)
#img.show_markers(ra, dec, layer='marker', edgecolor='red', facecolor='none', marker='o', s=10, alpha=0.9, linewidths=100.)#, layer='marker_set_1', edgecolor='black', facecolor='none', s=30, alpha=0.5, linewidths=20)
# img.scalebar.set_font(size=23, weight='bold',
#                       stretch='normal', family='sans-serif',
#                       style='normal', variant='normal')

# We may want to lengthen the scalebar, move it to the top left,
# and apply a physical scale
#img.scalebar.set_corner('top left')
# img.scalebar.set_length(20/3600.)
# img.scalebar.set_label('20 arcsec')

if cmd_args.debug:
    print("Creating of PDF image of:", position.split('-p')[0])
    
img.set_theme('publication')
img.save(image_r.replace('_swp-crop.fits', '-RGB.pdf'))

#+END_SRC

- I automatized this one to make the RGB images, for which I created a executable. I wrote one program to creted the executable, this one has to be 
run in the SMC folder: 

: python ../varios-programas/run-rgb-image.py > run-rgb-image.run

#+BEGIN_SRC python :eval no : run-rgb-image.py

'''
Creating command lines to run rgb_image-v2.py
'''
from __future__ import print_function
import glob
from astropy.table import Table

pattern1 = "MC*/MC*I*swp-crop.fits"
file_list1 = glob.glob(pattern1)

pattern2 = "MC*/MC*R*swp-crop.fits"
file_list2 = glob.glob(pattern2)

pattern3 = "MC*/MC*G*swp-crop.fits"
file_list3 = glob.glob(pattern3)

pattern_region = "MC*/*.reg"
file_list_region = glob.glob(pattern_region)

file_1 = []
file_2 = []
file_3 = []
file_region = []
for a, b, c, d in zip(file_list1, file_list2, file_list3, file_list_region):
    file_1.append(a.split('.fit')[0])
    file_2.append(b.split('.fit')[0])
    file_3.append(c.split('.fit')[0])
    file_region.append(d.split('.re')[0])

file_1.sort()
file_2.sort()
file_3.sort()
file_region.sort()
tab = Table([file_1, file_2, file_3, file_region],  names=('File1', 'File2', 'File3', 'File_region'), meta={'name': 'first table'})
    #table_fig.sort('Auto')
for aa, bb, cc, dd in zip(tab['File1'], tab['File2'], tab['File3'], tab['File_region']):
    file1 = aa
    file2 = bb
    file3 = cc
    file4 = dd
    print("python", "../varios-programas/rgb_image-v2.py", file1, file2, file3, "--position", file4, "--debug")
   
#+END_SRC


Because the comand lines into of the executable file are, for example, of the type:

: python ../varios-programas/rgb_image-v2.py MC0072/MC0072_I_006125_swp-crop MC0072/MC0072_R_006125_swp-crop MC0072/MC0072_G_006125_swp-crop --position MC0072/MC0072-006125-position --debug


After to create the file ith the comands, I convert the file in a executable:

: chmod +x run-rgb-image.run 

To rum the executable file:

: ./run-rgb-image.run 

- I already make for the filters G, R and I.

- I now have to make for the filters F515, F660, F861 (it is done).

* Finding for new SMC PNe

** Applying the colour criterio:
  Given catalog MC.catalog is a very large file ~ 4 G. It s necesary used database sqlite3. 
  + Creating sqlite database:
    : sqlite3 MCcatalog.db

   - Creating a table for example
  
#+begin_example
      CREATE TABLE MCcatalog (
      ...> ID INT PRIMARY KEY NOT NULL,
      ...> NAME TEXT NOT NULL
      ...> );
#+end_example
  
   + Import file.csv:
     
    : sqlite> .mode 
    : sqlite> .mode csv
    : sqlite> .import SMCcatalog.csv SMCcatalog

   + To see the tables in the database:

    : sqlite> .tables

   + See the name of columns:
   
   : sqlite> .schema SMCcatalog

#+RESULTS:
#+begin_example

   CREATE TABLE SMCcatalog(
  "Field" TEXT,
  "ID" TEXT,
  "RA" TEXT,
  "DEC" TEXT,
  "X" TEXT,
  "Y" TEXT,
  "ISOarea" TEXT,
  "MU_MAX" TEXT,
  "A" TEXT,
  "B" TEXT,
  "THETA" TEXT,
  "ELONGATION" TEXT,
  "ELLIPTICITY" TEXT,
  "FLUX_RADIUS" TEXT,
  "KRON_RADIUS" TEXT,
  "PhotoFlagDet" TEXT,
  "CLASS_STAR" TEXT,
  "FWHM" TEXT,
  "FWHM_n" TEXT,
  "s2nDet" TEXT,
  "PhotoFlag_U" TEXT,
  "PhotoFlag_F378" TEXT,
  "PhotoFlag_F395" TEXT,
  "PhotoFlag_F410" TEXT,
  "PhotoFlag_F430" TEXT,
  "PhotoFlag_G" TEXT,
  "PhotoFlag_F515" TEXT,
  "PhotoFlag_R" TEXT,
  "PhotoFlag_F660" TEXT,
  "PhotoFlag_I" TEXT,
  "PhotoFlag_F861" TEXT,
  "PhotoFlag_Z" TEXT,
  "U_auto" TEXT,
  "e_U_auto" TEXT,
  "s2n_U_auto" TEXT,
  "F378_auto" TEXT,
  "e_F378_auto" TEXT,
  "s2n_F378_auto" TEXT,
  "F395_auto" TEXT,
  "e_F395_auto" TEXT,
  "s2n_F395_auto" TEXT,
  "F410_auto" TEXT,
  "e_F410_auto" TEXT,
  "s2n_F410_auto" TEXT,
  "F430_auto" TEXT,
  "e_F430_auto" TEXT,
  "s2n_F430_auto" TEXT,
  "G_auto" TEXT,
  "e_G_auto" TEXT,
  "s2n_G_auto" TEXT,
  "F515_auto" TEXT,
  "e_F515_auto" TEXT,
  "s2n_F515_auto" TEXT,
  "R_auto" TEXT,
  "e_R_auto" TEXT,
  "s2n_R_auto" TEXT,
  "F660_auto" TEXT,
  "e_F660_auto" TEXT,
  "s2n_F660_auto" TEXT,
  "I_auto" TEXT,
  "e_I_auto" TEXT,
  "s2n_I_auto" TEXT,
  "F861_auto" TEXT,
  "e_F861_auto" TEXT,
  "s2n_F861_auto" TEXT,
  "Z_auto" TEXT,
  "e_Z_auto" TEXT,
  "s2n_Z_auto" TEXT,
  "nDet_auto" TEXT,
  "U_petro" TEXT,
  "e_U_petro" TEXT,
  "s2n_U_petro" TEXT,
  "F378_petro" TEXT,
  "e_F378_petro" TEXT,
  "s2n_F378_petro" TEXT,
  "F395_petro" TEXT,
  "e_F395_petro" TEXT,
  "s2n_F395_petro" TEXT,
  "F410_petro" TEXT,
  "e_F410_petro" TEXT,
  "s2n_F410_petro" TEXT,
  "F430_petro" TEXT,
  "e_F430_petro" TEXT,
  "s2n_F430_petro" TEXT,
  "G_petro" TEXT,
  "e_G_petro" TEXT,
  "s2n_G_petro" TEXT,
  "F515_petro" TEXT,
  "e_F515_petro" TEXT,
  "s2n_F515_petro" TEXT,
  "R_petro" TEXT,
  "e_R_petro" TEXT,
  "s2n_R_petro" TEXT,
  "F660_petro" TEXT,
  "e_F660_petro" TEXT,
  "s2n_F660_petro" TEXT,
  "I_petro" TEXT,
  "e_I_petro" TEXT,
  "s2n_I_petro" TEXT,
  "F861_petro" TEXT,
  "e_F861_petro" TEXT,
  "s2n_F861_petro" TEXT,
  "Z_petro" TEXT,
  "e_Z_petro" TEXT,
  "s2n_Z_petro" TEXT,
  "nDet_petro" TEXT,
  "U_iso" TEXT,
  "e_U_iso" TEXT,
  "s2n_U_iso" TEXT,
  "F378_iso" TEXT,
  "e_F378_iso" TEXT,
  "s2n_F378_iso" TEXT,
  "F395_iso" TEXT,
  "e_F395_iso" TEXT,
  "s2n_F395_iso" TEXT,
  "F410_iso" TEXT,
  "e_F410_iso" TEXT,
  "s2n_F410_iso" TEXT,
  "F430_iso" TEXT,
  "e_F430_iso" TEXT,
  "s2n_F430_iso" TEXT,
  "G_iso" TEXT,
  "e_G_iso" TEXT,
  "s2n_G_iso" TEXT,
  "F515_iso" TEXT,
  "e_F515_iso" TEXT,
  "s2n_F515_iso" TEXT,
  "R_iso" TEXT,
  "e_R_iso" TEXT,
  "s2n_R_iso" TEXT,
  "F660_iso" TEXT,
  "e_F660_iso" TEXT,
  "s2n_F660_iso" TEXT,
  "I_iso" TEXT,
  "e_I_iso" TEXT,
  "s2n_I_iso" TEXT,
  "F861_iso" TEXT,
  "e_F861_iso" TEXT,
  "s2n_F861_iso" TEXT,
  "Z_iso" TEXT,
  "e_Z_iso" TEXT,
  "s2n_Z_iso" TEXT,
  "nDet_iso" TEXT,
  "U_isocor" TEXT,
  "e_U_isocor" TEXT,
  "s2n_U_isocor" TEXT,
  "F378_isocor" TEXT,
  "e_F378_isocor" TEXT,
  "s2n_F378_isocor" TEXT,
  "F395_isocor" TEXT,
  "e_F395_isocor" TEXT,
  "s2n_F395_isocor" TEXT,
  "F410_isocor" TEXT,
  "e_F410_isocor" TEXT,
  "s2n_F410_isocor" TEXT,
  "F430_isocor" TEXT,
  "e_F430_isocor" TEXT,
  "s2n_F430_isocor" TEXT,
  "G_isocor" TEXT,
  "e_G_isocor" TEXT,
  "s2n_G_isocor" TEXT,
  "F515_isocor" TEXT,
  "e_F515_isocor" TEXT,
  "s2n_F515_isocor" TEXT,
  "R_isocor" TEXT,
  "e_R_isocor" TEXT,
  "s2n_R_isocor" TEXT,
  "F660_isocor" TEXT,
  "e_F660_isocor" TEXT,
  "s2n_F660_isocor" TEXT,
  "I_isocor" TEXT,
  "e_I_isocor" TEXT,
  "s2n_I_isocor" TEXT,
  "F861_isocor" TEXT,
  "e_F861_isocor" TEXT,
  "s2n_F861_isocor" TEXT,
  "Z_isocor" TEXT,
  "e_Z_isocor" TEXT,
  "s2n_Z_isocor" TEXT,
  "nDet_isocor" TEXT,
  "U_aper_3" TEXT,
  "e_U_aper_3" TEXT,
  "s2n_U_aper_3" TEXT,
  "F378_aper_3" TEXT,
  "e_F378_aper_3" TEXT,
  "s2n_F378_aper_3" TEXT,
  "F395_aper_3" TEXT,
  "e_F395_aper_3" TEXT,
  "s2n_F395_aper_3" TEXT,
  "F410_aper_3" TEXT,
  "e_F410_aper_3" TEXT,
  "s2n_F410_aper_3" TEXT,
  "F430_aper_3" TEXT,
  "e_F430_aper_3" TEXT,
  "s2n_F430_aper_3" TEXT,
  "G_aper_3" TEXT,
  "e_G_aper_3" TEXT,
  "s2n_G_aper_3" TEXT,
  "F515_aper_3" TEXT,
  "e_F515_aper_3" TEXT,
  "s2n_F515_aper_3" TEXT,
  "R_aper_3" TEXT,
  "e_R_aper_3" TEXT,
  "s2n_R_aper_3" TEXT,
  "F660_aper_3" TEXT,
  "e_F660_aper_3" TEXT,
  "s2n_F660_aper_3" TEXT,
  "I_aper_3" TEXT,
  "e_I_aper_3" TEXT,
  "s2n_I_aper_3" TEXT,
  "F861_aper_3" TEXT,
  "e_F861_aper_3" TEXT,
  "s2n_F861_aper_3" TEXT,
  "Z_aper_3" TEXT,
  "e_Z_aper_3" TEXT,
  "s2n_Z_aper_3" TEXT,
  "nDet_aper_3" TEXT,
  "U_aper_6" TEXT,
  "e_U_aper_6" TEXT,
  "s2n_U_aper_6" TEXT,
  "F378_aper_6" TEXT,
  "e_F378_aper_6" TEXT,
  "s2n_F378_aper_6" TEXT,
  "F395_aper_6" TEXT,
  "e_F395_aper_6" TEXT,
  "s2n_F395_aper_6" TEXT,
  "F410_aper_6" TEXT,
  "e_F410_aper_6" TEXT,
  "s2n_F410_aper_6" TEXT,
  "F430_aper_6" TEXT,
  "e_F430_aper_6" TEXT,
  "s2n_F430_aper_6" TEXT,
  "G_aper_6" TEXT,
  "e_G_aper_6" TEXT,
  "s2n_G_aper_6" TEXT,
  "F515_aper_6" TEXT,
  "e_F515_aper_6" TEXT,
  "s2n_F515_aper_6" TEXT,
  "R_aper_6" TEXT,
  "e_R_aper_6" TEXT,
  "s2n_R_aper_6" TEXT,
  "F660_aper_6" TEXT,
  "e_F660_aper_6" TEXT,
  "s2n_F660_aper_6" TEXT,
  "I_aper_6" TEXT,
  "e_I_aper_6" TEXT,
  "s2n_I_aper_6" TEXT,
  "F861_aper_6" TEXT,
  "e_F861_aper_6" TEXT,
  "s2n_F861_aper_6" TEXT,
  "Z_aper_6" TEXT,
  "e_Z_aper_6" TEXT,
  "s2n_Z_aper_6" TEXT,
  "nDet_aper_6" TEXT,
  "U_total" TEXT,
  "e_U_total" TEXT,
  "s2n_U_total" TEXT,
  "F378_total" TEXT,
  "e_F378_total" TEXT,
  "s2n_F378_total" TEXT,
  "F395_total" TEXT,
  "e_F395_total" TEXT,
  "s2n_F395_total" TEXT,
  "F410_total" TEXT,
  "e_F410_total" TEXT,
  "s2n_F410_total" TEXT,
  "F430_total" TEXT,
  "e_F430_total" TEXT,
  "s2n_F430_total" TEXT,
  "G_total" TEXT,
  "e_G_total" TEXT,
  "s2n_G_total" TEXT,
  "F515_total" TEXT,
  "e_F515_total" TEXT,
  "s2n_F515_total" TEXT,
  "R_total" TEXT,
  "e_R_total" TEXT,
  "s2n_R_total" TEXT,
  "F660_total" TEXT,
  "e_F660_total" TEXT,
  "s2n_F660_total" TEXT,
  "I_total" TEXT,
  "e_I_total" TEXT,
  "s2n_I_total" TEXT,
  "F861_total" TEXT,
  "e_F861_total" TEXT,
  "s2n_F861_total" TEXT,
  "Z_total" TEXT,
  "e_Z_total" TEXT,
  "s2n_Z_total" TEXT,
  "nDet_magTotal" TEXT
  );
    
#+end_example

+ Let run a simple query:
 
 : sqlite> select * from SMCcatalog limit 2;


#+RESULTS:
#+begin_example

MC0070,SPLUS.MC0070.000000.griz,6.082561011458683,-71.66490260623553,10214.195,844.23785,29,15.597364,2.0923233,1.5547086,-86.52176,1.3457978,0.25694627,"(1.8254867, 0.0, 0.0)",5.942718,0,0.93795925,5.075451,2.0471618,22.386076,0,0,0,0,0,0,0,0,0,0,0,0,21.838316,0.8116645,1.3423963,21.948238,1.4608434,0.7433894,21.084288,1.0805662,1.003897,21.387775,1.2906494,0.8418678,20.550402,0.5812432,1.8647504,19.541624,0.086724624,12.7078495,19.71508,0.21742633,5.0007987,19.383549,0.06949865,15.438983,19.234365,0.06896026,15.712825,19.494743,0.11010116,9.924407,19.16236,0.18116388,5.971214,18.814518,0.11141781,9.758946,12.0,22.126892,0.82587856,1.3236359,21.739687,0.93872863,1.156832,22.03373,2.007524,0.53974724,22.133139,1.9917636,0.5458041,21.163626,0.79234904,1.3652458,19.695084,0.0794617,14.074771,19.84288,0.19150312,5.684567,19.461124,0.058011197,18.274624,19.33154,0.059262358,18.243052,19.497759,0.08688101,12.654303,19.067757,0.12932481,8.332145,18.931812,0.09690224,11.234441,12.0,23.35841,1.4158545,0.76955324,23.324295,2.2319443,0.48656034,23.95683,6.5261493,0.16622008,21.855017,0.85881734,1.2651774,21.764252,0.7674045,1.4123888,19.835056,0.052094284,21.155556,20.070944,0.13499302,8.05453,19.582474,0.038614772,27.786995,19.360792,0.03656808,29.631319,19.528385,0.050979882,21.433723,19.171518,0.08124968,13.314124,18.990566,0.05787791,18.786448,12.0,20.162792,0.14752847,7.385526,20.128677,0.23211236,4.6786637,20.761211,0.6779059,1.6001881,18.659399,0.08998319,12.075102,18.568634,0.08058188,13.450586,18.043354,0.04056951,27.165316,16.875326,0.02,59.179096,18.89381,0.062637724,17.13007,16.165174,0.02,86.91384,18.460552,0.06133975,17.813713,15.975902,0.02,74.258965,17.780281,0.0592605,18.348146,12.0,99.0,22.721313,-0.0019641204,26.120989,17.298126,0.06277996,99.0,21.624758,-0.13201225,99.0,21.748543,-0.07595925,22.627684,1.0085319,1.0747042,20.258945,0.04882572,22.571785,20.738096,0.1517631,7.164491,19.823177,0.031590786,33.965233,19.647722,0.03160315,34.286465,19.696226,0.037749205,28.946007,19.438704,0.064504,16.770561,19.327824,0.048435893,22.448648,9.0,25.035194,7.8086605,0.13953422,23.684008,3.6674166,0.29611462,23.103586,3.5184503,0.30831102,23.090973,3.144362,0.34555703,21.570408,0.7575528,1.4307564,19.866146,0.061793625,17.834908,20.10749,0.1623416,6.697639,19.575245,0.044204816,24.273113,19.326403,0.040674124,26.640043,19.519447,0.05889222,18.554043,19.225002,0.09955552,10.865978,18.968216,0.06638991,16.377796,12.0,99.0,21.974827,-0.0019641204,25.445454,17.298126,0.06277996,99.0,20.953722,-0.13201225,99.0,21.087341,-0.07595925,22.038265,1.0085319,1.0747042,19.79395,0.04882572,22.571785,20.203436,0.1517631,7.164491,19.385695,0.031590786,33.965233,19.180222,0.03160315,34.286465,19.322979,0.037749205,28.946007,19.036411,0.064504,16.770561,18.953691,0.048435893,22.448648,9.0
MC0070,SPLUS.MC0070.000001.griz,6.177394747955132,-71.66593832317544,10018.773,844.7152,23,15.487787,1.5488486,1.4330238,-7.403101,1.0808254,0.07478124,"(1.3201131, 0.0, 0.0)",4.9102077,0,0.9503354,2.3795292,0.9597732,26.332409,0,0,0,0,0,0,0,0,0,0,0,0,24.844276,8.793735,0.123836994,22.574034,1.7764318,0.6119044,23.972984,10.49467,0.10321276,21.598627,1.0721679,1.0138222,22.030224,1.543589,0.70129496,19.96318,0.08814975,12.506073,24.835228,16.35626,0.06656734,19.701124,0.06437066,16.661858,19.295628,0.051172882,21.182789,19.516018,0.07754315,14.095649,19.036425,0.111356825,9.7160225,19.009892,0.09158851,11.872775,12.0,26.030273,21.010393,0.051973686,23.262012,2.677237,0.40639424,99.0,20.537388,-0.37072897,22.165228,1.445134,0.75285494,22.007391,1.2068546,0.89408755,20.087212,0.081132874,13.792956,23.24542,3.0364072,0.35950136,19.755287,0.05437212,19.481245,19.343697,0.04377656,24.715794,19.504946,0.06253355,17.591955,19.024963,0.088744156,12.14622,19.097336,0.07995102,13.618607,11.0,27.884546,77.85202,0.013987943,99.0,21.424126,-0.03547519,99.0,21.030504,-0.72848475,22.20863,1.0174716,1.0683224,22.958132,1.9567549,0.55321753,20.112886,0.05782757,19.063696,23.209915,1.9792538,0.5501026,19.795662,0.04060822,26.411766,19.47381,0.03557624,30.469337,19.464184,0.042056214,25.989525,19.101912,0.066391446,16.296457,19.146614,0.057513323,18.907095,10.0,24.688929,8.085677,0.13468133,99.0,21.56962,-0.03547519,99.0,20.783537,-0.72848475,19.013012,0.10658232,10.198574,19.762514,0.20370117,5.314212,18.688358,0.059667107,18.475962,20.014297,0.20603254,5.2845664,19.268465,0.06904726,15.533343,16.278193,0.02,75.44186,19.027922,0.065967314,16.56913,15.906293,0.02,69.78889,18.393108,0.07700848,14.120651,10.0,99.0,22.721313,-6.159502E-5,99.0,22.174767,-0.011863551,25.309793,13.386101,0.08091855,24.416374,5.33355,0.20380192,23.992432,3.5022852,0.3090871,20.214706,0.04712168,23.394901,24.226997,3.4874082,0.31220686,19.876114,0.03287732,32.622334,19.655975,0.031791884,34.09626,19.588482,0.034561623,31.625278,19.247772,0.05493125,19.696356,19.225056,0.044325482,24.532387,10.0,25.680069,14.127253,0.07708432,22.69991,1.4869614,0.73102534,99.0,20.910528,-0.8641026,21.952793,1.1071191,0.9818164,21.88827,1.0113571,1.070355,20.095636,0.07548541,14.60424,22.626354,1.5970803,0.68173945,19.761518,0.051890753,20.669092,19.347527,0.041412905,26.175037,19.512304,0.058526497,18.67566,19.080816,0.087525696,12.361461,19.143478,0.07771132,13.99294,11.0,99.0,21.974827,-6.159502E-5,99.0,21.499231,-0.011863551,24.638758,13.386101,0.08091855,23.755173,5.33355,0.20380192,23.403013,3.5022852,0.3090871,19.74971,0.04712168,23.394901,23.692337,3.4874082,0.31220686,19.438631,0.03287732,32.622334,19.188475,0.031791884,34.09626,19.215235,0.034561623,31.625278,18.845478,0.05493125,19.696356,18.850924,0.044325482,24.532387,10.0

#+end_example
 
+ Tables contains:
   
 : sqlite> select count(*) from SMCcatalog;

 : 2898812

** Run sqlite query on python

By applying the the colour criteria. Pne candidate were select 

: python ../varios-programas/sqlite-query.py

#+BEGIN_SRC python : Run query

'''
Author: Luis A. Gutiérrez
11/09/2020
Testing query on sqlite3
Based on https://stuartsplace.com/computing/programming/python/python-and-sqlite-exporting-data
Please consult it
'''
import sqlite3
import os
import csv

# Create a SQL connection to our SQLite database
conn = sqlite3.connect('MCcatalog.db')

cur = conn.cursor()

#  query
qry = ("SELECT * FROM SMCcatalog WHERE PhotoFlag_F660 <= 3.0 AND R_aper_3 <= 19 AND e_R_aper_3 <= 0.2 AND e_F660_aper_3 <= 0.2 AND e_I_aper_3 <= 0.2 AND R_aper_3 - F660_aper_3 >= 0.43*(R_aper_3 - I_aper_3) + 0.65 AND R_aper_3 - F660_aper_3 <= -6.8*(R_aper_3 - I_aper_3) - 1.3 AND F515_aper_3 - F660_aper_3 >= 0.3 AND F515_aper_3 - F660_aper_3 >= 2.7*(F515_aper_3 - F861_aper_3) + 2.15 AND G_aper_3 - F515_aper_3 <= 0.12*(F660_aper_3 - R_aper_3) - 0.01 AND G_aper_3 - F515_aper_3 <= -1.1*(F660_aper_3 - R_aper_3) - 1.07 AND Z_aper_3 - F660_aper_3 >= 0.2319*(Z_aper_3 - G_aper_3) + 0.85 AND Z_aper_3 - F660_aper_3 >= -1.3*(Z_aper_3 - G_aper_3) + 1.7 AND F410_aper_3 - F660_aper_3 >= 8.0*(G_aper_3 - I_aper_3) + 4.5 AND F410_aper_3 - F660_aper_3 >= 0.8*(G_aper_3 - I_aper_3) + 0.55;")
#for row in cur.execute(qry):
    #print(row)

cur.execute(qry)
data = cur.fetchall()
#print(data)

# Extract the table headers
headers = [i[0] for i in cur.description]

# Open CSV file for writing
file_name = 'PneCand-smc-color-viirfilError.csv'
csv_file = csv.writer(open(file_name, 'w', newline=''),
                             delimiter=',', lineterminator='\r\n',
                             quoting=csv.QUOTE_ALL, escapechar='\\')

# Add the headers and data to the CSV file.
csv_file.writerow(headers)
csv_file.writerows(data)

# Message stating export successful.
print("Data export successful ans writting the file: {}.".format(file_name))

# Be sure to close the connection
conn.close()

#+END_SRC

The file PneCand-smc-color-viirfilError.csv was wrote with 33 objects of which 16 are PNe known in agreement 
with (2007A&A...472..101I). In this query the error criteria were only used on the IPHAS filter and R <= 19.

- IPHAS error flites plus R <= 20 -> 49 objects select.
   : PneCand-smc-color-viirfilErrorR20.csv

- IPHAS error filters plus R <= 20.5 -> 57 objects select.
   : PneCand-smc-color-viirfilErrorR205.csv


- IPHAS error filters --NONE  plus R <= 19.5 -> 41 objects select.
   : PneCand-smc-color.csv 
  
